{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0","program":"/usr/bin/rls","arguments":["--crate-name","dasp_frame","--edition=2018","/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=27009d53f7eab7aa","-C","extra-filename=-27009d53f7eab7aa","--out-dir","/home/louie/Programs/maquinitas/target/rls/debug/deps","-L","dependency=/home/louie/Programs/maquinitas/target/rls/debug/deps","--extern","dasp_sample=/home/louie/Programs/maquinitas/target/rls/debug/deps/libdasp_sample-161b0e5a8cd7fc53.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/usr"],"output":"/home/louie/Programs/maquinitas/target/rls/debug/deps/libdasp_frame-27009d53f7eab7aa.rmeta"},"prelude":{"crate_id":{"name":"dasp_frame","disambiguator":[17015187330036316926,0]},"crate_root":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src","external_crates":[{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12023920652292776473,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[8607811298988957190,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9950803289178341956,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13474909584011716809,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14989130687617550202,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16102964373074206153,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5778140418855102640,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4313679198529278428,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4133710094375488264,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7595865551076237336,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7540130326731804087,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[12866123005810308726,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[1553467655670750388,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[15291019179027074616,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[985971798445026598,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13801465309967224704,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[2515263550385514547,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[15896354199165419201,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[14578328142683063560,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","num":20,"id":{"name":"dasp_sample","disambiguator":[17472564141048077419,0]}}],"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":0,"byte_end":20744,"line_start":1,"line_end":579,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":0,"byte_end":20744,"line_start":1,"line_end":579,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":56},{"krate":0,"index":60},{"krate":0,"index":45},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":219},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":375},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":531},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":609},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":765},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":843},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":921},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":999},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1038},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1077},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1155},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1233},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":46},{"krate":0,"index":1311},{"krate":0,"index":1340},{"krate":0,"index":1369},{"krate":0,"index":1398},{"krate":0,"index":1427},{"krate":0,"index":1456},{"krate":0,"index":1485},{"krate":0,"index":1514},{"krate":0,"index":1543},{"krate":0,"index":1572},{"krate":0,"index":1601},{"krate":0,"index":1630},{"krate":0,"index":1659},{"krate":0,"index":1688},{"krate":0,"index":47},{"krate":0,"index":53}],"decl_id":null,"docs":" Use the [**Frame**](./trait.Frame.html) trait to remain generic over the number of channels at\n a single discrete moment in time.","sig":null,"attributes":[{"value":"/ Use the [**Frame**](./trait.Frame.html) trait to remain generic over the number of channels at","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":0,"byte_end":98,"line_start":1,"line_end":1,"column_start":1,"column_end":99}},{"value":"/ a single discrete moment in time.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":99,"byte_end":136,"line_start":2,"line_end":2,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":137,"byte_end":140,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Implementations are provided for all fixed-size arrays up to 32 elements in length.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":141,"byte_end":228,"line_start":4,"line_end":4,"column_start":1,"column_end":88}}]},{"kind":"Trait","id":{"krate":0,"index":6},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":618,"byte_end":623,"line_start":17,"line_end":17,"column_start":11,"column_end":16},"name":"Frame","qualname":"::Frame","value":"Frame: Copy + Clone + PartialEq","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36}],"decl_id":null,"docs":" Represents one sample from each channel at a single discrete instance in time within a\n PCM signal.","sig":null,"attributes":[{"value":"/ Represents one sample from each channel at a single discrete instance in time within a","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":300,"byte_end":390,"line_start":10,"line_end":10,"column_start":1,"column_end":91}},{"value":"/ PCM signal.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":391,"byte_end":406,"line_start":11,"line_end":11,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":407,"byte_end":410,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Implementations are provided for:","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":411,"byte_end":448,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":449,"byte_end":452,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ - All fixed-size arrays up to a length of 32 elements.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":453,"byte_end":511,"line_start":15,"line_end":15,"column_start":1,"column_end":59}},{"value":"/ - All primitive types that implement `Sample`. These implementations assume `CHANNELS = 1`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":512,"byte_end":607,"line_start":16,"line_end":16,"column_start":1,"column_end":96}}]},{"kind":"Type","id":{"krate":0,"index":7},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":733,"byte_end":739,"line_start":19,"line_end":19,"column_start":10,"column_end":16},"name":"Sample","qualname":"::Frame::Sample","value":"type Sample: Sample;","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" The type of PCM sample stored at each channel within the frame.\n","sig":null,"attributes":[{"value":"/ The type of PCM sample stored at each channel within the frame.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":656,"byte_end":723,"line_start":18,"line_end":18,"column_start":5,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":8},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":953,"byte_end":964,"line_start":22,"line_end":22,"column_start":10,"column_end":21},"name":"NumChannels","qualname":"::Frame::NumChannels","value":"type NumChannels: NumChannels;","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" A typified version of a number of channels in the `Frame`, used for safely mapping frames\n of the same length to other `Frame`s, perhaps with a different `Sample` associated type.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels in the `Frame`, used for safely mapping frames","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":753,"byte_end":846,"line_start":20,"line_end":20,"column_start":5,"column_end":98}},{"value":"/ of the same length to other `Frame`s, perhaps with a different `Sample` associated type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":851,"byte_end":943,"line_start":21,"line_end":21,"column_start":5,"column_end":97}}]},{"kind":"Type","id":{"krate":0,"index":9},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1133,"byte_end":1141,"line_start":25,"line_end":25,"column_start":10,"column_end":18},"name":"Channels","qualname":"::Frame::Channels","value":"type Channels: Iterator<Item = Self::Sample>;","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" An iterator yielding the sample in each channel, starting from left (channel 0) and ending\n at the right (channel NumChannels-1).\n","sig":null,"attributes":[{"value":"/ An iterator yielding the sample in each channel, starting from left (channel 0) and ending","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":983,"byte_end":1077,"line_start":23,"line_end":23,"column_start":5,"column_end":99}},{"value":"/ at the right (channel NumChannels-1).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1082,"byte_end":1123,"line_start":24,"line_end":24,"column_start":5,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":10},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1285,"byte_end":1291,"line_start":27,"line_end":27,"column_start":10,"column_end":16},"name":"Signed","qualname":"::Frame::Signed","value":"type Signed: Frame<Sample = <Self::Sample as Sample>::Signed, NumChannels = Self::NumChannels>;","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" A frame type with equilavent number of channels using the associated `Sample::Signed` format.\n","sig":null,"attributes":[{"value":"/ A frame type with equilavent number of channels using the associated `Sample::Signed` format.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1178,"byte_end":1275,"line_start":26,"line_end":26,"column_start":5,"column_end":102}}]},{"kind":"Type","id":{"krate":0,"index":11},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1486,"byte_end":1491,"line_start":29,"line_end":29,"column_start":10,"column_end":15},"name":"Float","qualname":"::Frame::Float","value":"type Float: Frame<Sample = <Self::Sample as Sample>::Float, NumChannels = Self::NumChannels>;","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" A frame type with equilavent number of channels using the associated `Sample::Float` format.\n","sig":null,"attributes":[{"value":"/ A frame type with equilavent number of channels using the associated `Sample::Float` format.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1380,"byte_end":1476,"line_start":28,"line_end":28,"column_start":5,"column_end":101}}]},{"kind":"Const","id":{"krate":0,"index":12},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2168,"byte_end":2179,"line_start":46,"line_end":46,"column_start":11,"column_end":22},"name":"EQUILIBRIUM","qualname":"::Frame::EQUILIBRIUM","value":"Self","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" The equilibrium value for the wave that this `Sample` type represents. This is normally the\n value that is equal distance from both the min and max ranges of the sample.","sig":null,"attributes":[{"value":"/ The equilibrium value for the wave that this `Sample` type represents. This is normally the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1580,"byte_end":1675,"line_start":31,"line_end":31,"column_start":5,"column_end":100}},{"value":"/ value that is equal distance from both the min and max ranges of the sample.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1680,"byte_end":1760,"line_start":32,"line_end":32,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1765,"byte_end":1768,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1773,"byte_end":1787,"line_start":34,"line_end":34,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1792,"byte_end":1795,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1800,"byte_end":1811,"line_start":36,"line_end":36,"column_start":5,"column_end":16}},{"value":"/ use dasp_frame::{Frame, Mono, Stereo};","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1816,"byte_end":1858,"line_start":37,"line_end":37,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1863,"byte_end":1866,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1871,"byte_end":1886,"line_start":39,"line_end":39,"column_start":5,"column_end":20}},{"value":"/     assert_eq!(Mono::<f32>::EQUILIBRIUM, [0.0]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1891,"byte_end":1943,"line_start":40,"line_end":40,"column_start":5,"column_end":57}},{"value":"/     assert_eq!(Stereo::<f32>::EQUILIBRIUM, [0.0, 0.0]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":1948,"byte_end":2007,"line_start":41,"line_end":41,"column_start":5,"column_end":64}},{"value":"/     assert_eq!(<[f32; 3]>::EQUILIBRIUM, [0.0, 0.0, 0.0]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2012,"byte_end":2073,"line_start":42,"line_end":42,"column_start":5,"column_end":66}},{"value":"/     assert_eq!(<[u8; 2]>::EQUILIBRIUM, [128u8, 128]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2078,"byte_end":2135,"line_start":43,"line_end":43,"column_start":5,"column_end":62}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2140,"byte_end":2145,"line_start":44,"line_end":44,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2150,"byte_end":2157,"line_start":45,"line_end":45,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":13},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2600,"byte_end":2608,"line_start":62,"line_end":62,"column_start":11,"column_end":19},"name":"CHANNELS","qualname":"::Frame::CHANNELS","value":"usize","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" The total number of channels within the frame.","sig":null,"attributes":[{"value":"/ The total number of channels within the frame.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2192,"byte_end":2242,"line_start":48,"line_end":48,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2247,"byte_end":2250,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2255,"byte_end":2269,"line_start":50,"line_end":50,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2274,"byte_end":2277,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2282,"byte_end":2293,"line_start":52,"line_end":52,"column_start":5,"column_end":16}},{"value":"/ use dasp_frame::{Frame, Mono, Stereo};","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2298,"byte_end":2340,"line_start":53,"line_end":53,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2345,"byte_end":2348,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2353,"byte_end":2368,"line_start":55,"line_end":55,"column_start":5,"column_end":20}},{"value":"/     assert_eq!(Mono::<f32>::CHANNELS, 1);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2373,"byte_end":2418,"line_start":56,"line_end":56,"column_start":5,"column_end":50}},{"value":"/     assert_eq!(Stereo::<f32>::CHANNELS, 2);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2423,"byte_end":2470,"line_start":57,"line_end":57,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(<[f32; 3]>::CHANNELS, 3);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2475,"byte_end":2519,"line_start":58,"line_end":58,"column_start":5,"column_end":49}},{"value":"/     assert_eq!(<[u8; 2]>::CHANNELS, 2);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2524,"byte_end":2567,"line_start":59,"line_end":59,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2572,"byte_end":2577,"line_start":60,"line_end":60,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2582,"byte_end":2589,"line_start":61,"line_end":61,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2816,"byte_end":2823,"line_start":67,"line_end":67,"column_start":8,"column_end":15},"name":"from_fn","qualname":"::Frame::from_fn","value":"pub fn from_fn<F>(F) -> Self where F: FnMut(usize) -> Self::Sample","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Create a new `Frame` where the `Sample` for each channel is produced by the given function.","sig":null,"attributes":[{"value":"/ Create a new `Frame` where the `Sample` for each channel is produced by the given function.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2622,"byte_end":2717,"line_start":64,"line_end":64,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2722,"byte_end":2725,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The given function should map each channel index to its respective sample.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2730,"byte_end":2808,"line_start":66,"line_end":66,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3251,"byte_end":3263,"line_start":77,"line_end":77,"column_start":8,"column_end":20},"name":"from_samples","qualname":"::Frame::from_samples","value":"pub fn from_samples<I>(&mut I) -> Option<Self> where I: Iterator<Item =\nSelf::Sample>","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Create a new `Frame` from a borrowed `Iterator` yielding samples for each channel.","sig":null,"attributes":[{"value":"/ Create a new `Frame` from a borrowed `Iterator` yielding samples for each channel.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2900,"byte_end":2986,"line_start":71,"line_end":71,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2991,"byte_end":2994,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the given `Iterator` does not yield enough `Sample`s.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":2999,"byte_end":3074,"line_start":73,"line_end":73,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3079,"byte_end":3082,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ This is necessary for the `signal::FromSamples` `Iterator`, that converts some `Iterator`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3087,"byte_end":3180,"line_start":75,"line_end":75,"column_start":5,"column_end":98}},{"value":"/ yielding `Sample`s to an `Iterator` yielding `Frame`s.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3185,"byte_end":3243,"line_start":76,"line_end":76,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3455,"byte_end":3463,"line_start":82,"line_end":82,"column_start":8,"column_end":16},"name":"channels","qualname":"::Frame::channels","value":"pub fn channels(Self) -> Self::Channels","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Converts the frame into an iterator yielding the sample for each channel in the frame.\n","sig":null,"attributes":[{"value":"/ Converts the frame into an iterator yielding the sample for each channel in the frame.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3357,"byte_end":3447,"line_start":81,"line_end":81,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3591,"byte_end":3598,"line_start":85,"line_end":85,"column_start":8,"column_end":15},"name":"channel","qualname":"::Frame::channel","value":"pub fn channel(&Self, usize) -> Option<&Self::Sample>","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Yields a reference to the `Sample` of the channel at the given index if there is one.\n","sig":null,"attributes":[{"value":"/ Yields a reference to the `Sample` of the channel at the given index if there is one.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3494,"byte_end":3583,"line_start":84,"line_end":84,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4000,"byte_end":4017,"line_start":93,"line_end":93,"column_start":15,"column_end":32},"name":"channel_unchecked","qualname":"::Frame::channel_unchecked","value":"pub unsafe fn channel_unchecked(&Self, usize) -> &Self::Sample","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Returns a pointer to the sample of the channel at the given index, without doing bounds\n checking.","sig":null,"attributes":[{"value":"/ Returns a pointer to the sample of the channel at the given index, without doing bounds","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3649,"byte_end":3740,"line_start":87,"line_end":87,"column_start":5,"column_end":96}},{"value":"/ checking.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3745,"byte_end":3758,"line_start":88,"line_end":88,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3763,"byte_end":3766,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Note: This is primarily a necessity for efficient `Frame::map` and `Frame::zip_map`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3771,"byte_end":3858,"line_start":90,"line_end":90,"column_start":5,"column_end":92}},{"value":"/ methods, as for those methods we can guarantee lengths of different `Frame`s to be the same","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3863,"byte_end":3958,"line_start":91,"line_end":91,"column_start":5,"column_end":100}},{"value":"/ at *compile-time*.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":3963,"byte_end":3985,"line_start":92,"line_end":92,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4493,"byte_end":4496,"line_start":110,"line_end":110,"column_start":8,"column_end":11},"name":"map","qualname":"::Frame::map","value":"pub fn map<F, M>(Self, M) -> F where F: Frame<NumChannels =\nSelf::NumChannels>, M: FnMut(Self::Sample) -> F::Sample","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Applies the given function to each sample in the `Frame` in channel order and returns the\n result as a new `Frame`.","sig":null,"attributes":[{"value":"/ Applies the given function to each sample in the `Frame` in channel order and returns the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4060,"byte_end":4153,"line_start":95,"line_end":95,"column_start":5,"column_end":98}},{"value":"/ result as a new `Frame`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4158,"byte_end":4186,"line_start":96,"line_end":96,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4191,"byte_end":4194,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4199,"byte_end":4212,"line_start":98,"line_end":98,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4217,"byte_end":4220,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4225,"byte_end":4236,"line_start":100,"line_end":100,"column_start":5,"column_end":16}},{"value":"/ use dasp_frame::Frame;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4241,"byte_end":4267,"line_start":101,"line_end":101,"column_start":5,"column_end":31}},{"value":"/ use dasp_sample::Sample;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4272,"byte_end":4300,"line_start":102,"line_end":102,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4305,"byte_end":4308,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4313,"byte_end":4328,"line_start":104,"line_end":104,"column_start":5,"column_end":20}},{"value":"/     let foo = [0i16, 0];","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4333,"byte_end":4361,"line_start":105,"line_end":105,"column_start":5,"column_end":33}},{"value":"/     let bar: [u8; 2] = foo.map(Sample::to_sample);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4366,"byte_end":4420,"line_start":106,"line_end":106,"column_start":5,"column_end":59}},{"value":"/     assert_eq!(bar, [128u8, 128]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4425,"byte_end":4463,"line_start":107,"line_end":107,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4468,"byte_end":4473,"line_start":108,"line_end":108,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4478,"byte_end":4485,"line_start":109,"line_end":109,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4929,"byte_end":4936,"line_start":120,"line_end":120,"column_start":8,"column_end":15},"name":"zip_map","qualname":"::Frame::zip_map","value":"pub fn zip_map<O, F, M>(Self, O, M) -> F where O: Frame<NumChannels =\nSelf::NumChannels>, F: Frame<NumChannels = Self::NumChannels>,\nM: FnMut(Self::Sample, O::Sample) -> F::Sample","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Calls the given function with the pair of elements at every index and returns the\n resulting Frame.","sig":null,"attributes":[{"value":"/ Calls the given function with the pair of elements at every index and returns the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4633,"byte_end":4718,"line_start":115,"line_end":115,"column_start":5,"column_end":90}},{"value":"/ resulting Frame.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4723,"byte_end":4743,"line_start":116,"line_end":116,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4748,"byte_end":4751,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ On a `Vec` this would be akin to `.into_iter().zip(other).map(|(a, b)| ...).collect()`, though","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4756,"byte_end":4854,"line_start":118,"line_end":118,"column_start":5,"column_end":103}},{"value":"/ much quicker and tailored to fixed-size arrays of samples.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":4859,"byte_end":4921,"line_start":119,"line_end":119,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5510,"byte_end":5525,"line_start":139,"line_end":139,"column_start":8,"column_end":23},"name":"to_signed_frame","qualname":"::Frame::to_signed_frame","value":"pub fn to_signed_frame(Self) -> Self::Signed","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Converts the frame type to the equivalent signal in its associated `Float`ing point format.","sig":null,"attributes":[{"value":"/ Converts the frame type to the equivalent signal in its associated `Float`ing point format.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5152,"byte_end":5247,"line_start":126,"line_end":126,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5252,"byte_end":5255,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5260,"byte_end":5273,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5278,"byte_end":5281,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5286,"byte_end":5297,"line_start":130,"line_end":130,"column_start":5,"column_end":16}},{"value":"/ use dasp_frame::Frame;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5302,"byte_end":5328,"line_start":131,"line_end":131,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5333,"byte_end":5336,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5341,"byte_end":5356,"line_start":133,"line_end":133,"column_start":5,"column_end":20}},{"value":"/     let foo = [128u8; 2];","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5361,"byte_end":5390,"line_start":134,"line_end":134,"column_start":5,"column_end":34}},{"value":"/     let signed = foo.to_signed_frame();","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5395,"byte_end":5438,"line_start":135,"line_end":135,"column_start":5,"column_end":48}},{"value":"/     assert_eq!(signed, [0i8; 2]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5443,"byte_end":5480,"line_start":136,"line_end":136,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5485,"byte_end":5490,"line_start":137,"line_end":137,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5495,"byte_end":5502,"line_start":138,"line_end":138,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5901,"byte_end":5915,"line_start":154,"line_end":154,"column_start":8,"column_end":22},"name":"to_float_frame","qualname":"::Frame::to_float_frame","value":"pub fn to_float_frame(Self) -> Self::Float","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Converts the frame type to the equivalent signal in its associated `Signed` format.","sig":null,"attributes":[{"value":"/ Converts the frame type to the equivalent signal in its associated `Signed` format.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5554,"byte_end":5641,"line_start":141,"line_end":141,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5646,"byte_end":5649,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5654,"byte_end":5667,"line_start":143,"line_end":143,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5672,"byte_end":5675,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5680,"byte_end":5691,"line_start":145,"line_end":145,"column_start":5,"column_end":16}},{"value":"/ use dasp_frame::Frame;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5696,"byte_end":5722,"line_start":146,"line_end":146,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5727,"byte_end":5730,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5735,"byte_end":5750,"line_start":148,"line_end":148,"column_start":5,"column_end":20}},{"value":"/     let foo = [128u8; 2];","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5755,"byte_end":5784,"line_start":149,"line_end":149,"column_start":5,"column_end":34}},{"value":"/     let float = foo.to_float_frame();","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5789,"byte_end":5830,"line_start":150,"line_end":150,"column_start":5,"column_end":46}},{"value":"/     assert_eq!(float, [0.0; 2]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5835,"byte_end":5871,"line_start":151,"line_end":151,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5876,"byte_end":5881,"line_start":152,"line_end":152,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5886,"byte_end":5893,"line_start":153,"line_end":153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6415,"byte_end":6425,"line_start":171,"line_end":171,"column_start":8,"column_end":18},"name":"offset_amp","qualname":"::Frame::offset_amp","value":"pub fn offset_amp(Self, <Self::Sample as Sample>::Signed) -> Self","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Offsets the amplitude of every channel in the frame by the given `offset` and yields the\n resulting frame.","sig":null,"attributes":[{"value":"/ Offsets the amplitude of every channel in the frame by the given `offset` and yields the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":5943,"byte_end":6035,"line_start":156,"line_end":156,"column_start":5,"column_end":97}},{"value":"/ resulting frame.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6040,"byte_end":6060,"line_start":157,"line_end":157,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6065,"byte_end":6068,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6073,"byte_end":6086,"line_start":159,"line_end":159,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6091,"byte_end":6094,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6099,"byte_end":6110,"line_start":161,"line_end":161,"column_start":5,"column_end":16}},{"value":"/ use dasp_frame::Frame;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6115,"byte_end":6141,"line_start":162,"line_end":162,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6146,"byte_end":6149,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6154,"byte_end":6169,"line_start":164,"line_end":164,"column_start":5,"column_end":20}},{"value":"/     assert_eq!([0.25, -0.5].offset_amp(0.5), [0.75, 0.0]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6174,"byte_end":6236,"line_start":165,"line_end":165,"column_start":5,"column_end":67}},{"value":"/     assert_eq!([0.5, -0.25].offset_amp(-0.25), [0.25, -0.5]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6241,"byte_end":6306,"line_start":166,"line_end":166,"column_start":5,"column_end":70}},{"value":"/     assert_eq!([128u8, 192].offset_amp(-64), [64, 128]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6311,"byte_end":6371,"line_start":167,"line_end":167,"column_start":5,"column_end":65}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6376,"byte_end":6381,"line_start":168,"line_end":168,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6386,"byte_end":6393,"line_start":169,"line_end":169,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6398,"byte_end":6407,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7069,"byte_end":7078,"line_start":193,"line_end":193,"column_start":8,"column_end":17},"name":"scale_amp","qualname":"::Frame::scale_amp","value":"pub fn scale_amp(Self, <Self::Sample as Sample>::Float) -> Self","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Multiplies each `Sample` in the `Frame` by the given amplitude and returns the resulting\n `Frame`.","sig":null,"attributes":[{"value":"/ Multiplies each `Sample` in the `Frame` by the given amplitude and returns the resulting","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6535,"byte_end":6627,"line_start":175,"line_end":175,"column_start":5,"column_end":97}},{"value":"/ `Frame`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6632,"byte_end":6644,"line_start":176,"line_end":176,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6649,"byte_end":6652,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ - A > 1.0 amplifies the sample.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6657,"byte_end":6692,"line_start":178,"line_end":178,"column_start":5,"column_end":40}},{"value":"/ - A < 1.0 attenuates the sample.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6697,"byte_end":6733,"line_start":179,"line_end":179,"column_start":5,"column_end":41}},{"value":"/ - A == 1.0 yields the same sample.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6738,"byte_end":6776,"line_start":180,"line_end":180,"column_start":5,"column_end":43}},{"value":"/ - A == 0.0 yields the `Sample::equilibrium`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6781,"byte_end":6829,"line_start":181,"line_end":181,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6834,"byte_end":6837,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6842,"byte_end":6855,"line_start":183,"line_end":183,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6860,"byte_end":6863,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6868,"byte_end":6879,"line_start":185,"line_end":185,"column_start":5,"column_end":16}},{"value":"/ use dasp_frame::Frame;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6884,"byte_end":6910,"line_start":186,"line_end":186,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6915,"byte_end":6918,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6923,"byte_end":6938,"line_start":188,"line_end":188,"column_start":5,"column_end":20}},{"value":"/     assert_eq!([0.1, 0.2, -0.1, -0.2].scale_amp(2.0), [0.2, 0.4, -0.2, -0.4]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":6943,"byte_end":7025,"line_start":189,"line_end":189,"column_start":5,"column_end":87}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7030,"byte_end":7035,"line_start":190,"line_end":190,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7040,"byte_end":7047,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7052,"byte_end":7061,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7530,"byte_end":7537,"line_start":210,"line_end":210,"column_start":8,"column_end":15},"name":"add_amp","qualname":"::Frame::add_amp","value":"pub fn add_amp<F>(Self, F) -> Self where F: Frame<Sample =\n<Self::Sample as Sample>::Signed, NumChannels =\n<Self::Sample as Sample>::Signed>","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Sums each channel in `other` with each channel in `self` and returns the resulting `Frame`.","sig":null,"attributes":[{"value":"/ Sums each channel in `other` with each channel in `self` and returns the resulting `Frame`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7181,"byte_end":7276,"line_start":197,"line_end":197,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7281,"byte_end":7284,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7289,"byte_end":7302,"line_start":199,"line_end":199,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7307,"byte_end":7310,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7315,"byte_end":7326,"line_start":201,"line_end":201,"column_start":5,"column_end":16}},{"value":"/ use dasp_frame::Frame;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7331,"byte_end":7357,"line_start":202,"line_end":202,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7362,"byte_end":7365,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7370,"byte_end":7385,"line_start":204,"line_end":204,"column_start":5,"column_end":20}},{"value":"/     let foo = [0.25, 0.5].add_amp([-0.75, 0.25]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7390,"byte_end":7443,"line_start":205,"line_end":205,"column_start":5,"column_end":58}},{"value":"/     assert_eq!(foo, [-0.5, 0.75]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7448,"byte_end":7486,"line_start":206,"line_end":206,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7491,"byte_end":7496,"line_start":207,"line_end":207,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7501,"byte_end":7508,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7513,"byte_end":7522,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8155,"byte_end":8162,"line_start":233,"line_end":233,"column_start":8,"column_end":15},"name":"mul_amp","qualname":"::Frame::mul_amp","value":"pub fn mul_amp<F>(Self, F) -> Self where F: Frame<Sample =\n<Self::Sample as Sample>::Float, NumChannels =\n<Self::Sample as Sample>::Float>","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Multiplies `other` with `self` and returns the resulting `Frame`.","sig":null,"attributes":[{"value":"/ Multiplies `other` with `self` and returns the resulting `Frame`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7731,"byte_end":7800,"line_start":217,"line_end":217,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7805,"byte_end":7808,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7813,"byte_end":7826,"line_start":219,"line_end":219,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7831,"byte_end":7834,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7839,"byte_end":7850,"line_start":221,"line_end":221,"column_start":5,"column_end":16}},{"value":"/ use dasp_frame::Frame;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7855,"byte_end":7881,"line_start":222,"line_end":222,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7886,"byte_end":7889,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7894,"byte_end":7909,"line_start":224,"line_end":224,"column_start":5,"column_end":20}},{"value":"/     let foo = [0.25, 0.4].mul_amp([0.2, 0.5]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7914,"byte_end":7964,"line_start":225,"line_end":225,"column_start":5,"column_end":55}},{"value":"/     assert_eq!(foo, [0.05, 0.2]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":7969,"byte_end":8006,"line_start":226,"line_end":226,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8011,"byte_end":8014,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/     let bar = [192u8, 64].mul_amp([0.0, -1.0]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8019,"byte_end":8070,"line_start":228,"line_end":228,"column_start":5,"column_end":56}},{"value":"/     assert_eq!(bar, [128, 192]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8075,"byte_end":8111,"line_start":229,"line_end":229,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8116,"byte_end":8121,"line_start":230,"line_end":230,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8126,"byte_end":8133,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8138,"byte_end":8147,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":38},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8874,"byte_end":8885,"line_start":249,"line_end":249,"column_start":11,"column_end":22},"name":"NumChannels","qualname":"::NumChannels","value":"NumChannels","parent":null,"children":[],"decl_id":null,"docs":" Restricts the types that may be used as the `Frame::NumChannels` associated type.","sig":null,"attributes":[{"value":"/ Restricts the types that may be used as the `Frame::NumChannels` associated type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8353,"byte_end":8438,"line_start":241,"line_end":241,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8439,"byte_end":8442,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ `NumChannels` allows us to enforce the number of channels that a `Frame` must have in certain","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8443,"byte_end":8540,"line_start":243,"line_end":243,"column_start":1,"column_end":98}},{"value":"/ operations. This is particularly useful for `Frame::map` and `Frame::zip_map`, as it allows us","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8541,"byte_end":8639,"line_start":244,"line_end":244,"column_start":1,"column_end":99}},{"value":"/ to guarantee that the input and output frame types will retain the same number of channels at","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8640,"byte_end":8737,"line_start":245,"line_end":245,"column_start":1,"column_end":98}},{"value":"/ compile-time, and in turn removes the need for bounds checking.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8738,"byte_end":8805,"line_start":246,"line_end":246,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8806,"byte_end":8809,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for types `N1`...`N32`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8810,"byte_end":8863,"line_start":248,"line_end":248,"column_start":1,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":39},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8899,"byte_end":8903,"line_start":251,"line_end":251,"column_start":10,"column_end":14},"name":"Mono","qualname":"::Mono","value":"[S; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":42},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8926,"byte_end":8932,"line_start":252,"line_end":252,"column_start":10,"column_end":16},"name":"Stereo","qualname":"::Stereo","value":"[S; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":56},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9054,"byte_end":9062,"line_start":256,"line_end":256,"column_start":12,"column_end":20},"name":"Channels","qualname":"::Channels","value":"Channels {  }","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59}],"decl_id":null,"docs":" An iterator that yields the sample for each channel in the frame by value.\n","sig":null,"attributes":[{"value":"/ An iterator that yields the sample for each channel in the frame by value.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":8947,"byte_end":9025,"line_start":254,"line_end":254,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":63},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":13914,"byte_end":13916,"line_start":393,"line_end":393,"column_start":5,"column_end":7},"name":"N1","qualname":"::N1","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":102},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":13931,"byte_end":13933,"line_start":394,"line_end":394,"column_start":5,"column_end":7},"name":"N2","qualname":"::N2","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":141},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":13950,"byte_end":13952,"line_start":395,"line_end":395,"column_start":5,"column_end":7},"name":"N3","qualname":"::N3","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":180},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":13971,"byte_end":13973,"line_start":396,"line_end":396,"column_start":5,"column_end":7},"name":"N4","qualname":"::N4","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":219},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":13994,"byte_end":13996,"line_start":397,"line_end":397,"column_start":5,"column_end":7},"name":"N5","qualname":"::N5","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":258},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14019,"byte_end":14021,"line_start":398,"line_end":398,"column_start":5,"column_end":7},"name":"N6","qualname":"::N6","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":297},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14046,"byte_end":14048,"line_start":399,"line_end":399,"column_start":5,"column_end":7},"name":"N7","qualname":"::N7","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":336},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14075,"byte_end":14077,"line_start":400,"line_end":400,"column_start":5,"column_end":7},"name":"N8","qualname":"::N8","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":375},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14106,"byte_end":14108,"line_start":401,"line_end":401,"column_start":5,"column_end":7},"name":"N9","qualname":"::N9","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":414},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14139,"byte_end":14142,"line_start":402,"line_end":402,"column_start":5,"column_end":8},"name":"N10","qualname":"::N10","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":453},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14174,"byte_end":14177,"line_start":403,"line_end":403,"column_start":5,"column_end":8},"name":"N11","qualname":"::N11","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":492},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14212,"byte_end":14215,"line_start":404,"line_end":404,"column_start":5,"column_end":8},"name":"N12","qualname":"::N12","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":531},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14253,"byte_end":14256,"line_start":405,"line_end":405,"column_start":5,"column_end":8},"name":"N13","qualname":"::N13","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":570},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14297,"byte_end":14300,"line_start":406,"line_end":406,"column_start":5,"column_end":8},"name":"N14","qualname":"::N14","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":609},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14344,"byte_end":14347,"line_start":407,"line_end":407,"column_start":5,"column_end":8},"name":"N15","qualname":"::N15","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":648},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14394,"byte_end":14397,"line_start":408,"line_end":408,"column_start":5,"column_end":8},"name":"N16","qualname":"::N16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":687},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14447,"byte_end":14450,"line_start":409,"line_end":409,"column_start":5,"column_end":8},"name":"N17","qualname":"::N17","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":726},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14503,"byte_end":14506,"line_start":410,"line_end":410,"column_start":5,"column_end":8},"name":"N18","qualname":"::N18","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":765},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14562,"byte_end":14565,"line_start":411,"line_end":411,"column_start":5,"column_end":8},"name":"N19","qualname":"::N19","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":804},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14624,"byte_end":14627,"line_start":412,"line_end":412,"column_start":5,"column_end":8},"name":"N20","qualname":"::N20","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":843},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14689,"byte_end":14692,"line_start":413,"line_end":413,"column_start":5,"column_end":8},"name":"N21","qualname":"::N21","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":882},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14757,"byte_end":14760,"line_start":414,"line_end":414,"column_start":5,"column_end":8},"name":"N22","qualname":"::N22","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":921},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14828,"byte_end":14831,"line_start":415,"line_end":415,"column_start":5,"column_end":8},"name":"N23","qualname":"::N23","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":960},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14902,"byte_end":14905,"line_start":416,"line_end":416,"column_start":5,"column_end":8},"name":"N24","qualname":"::N24","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":999},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":14979,"byte_end":14982,"line_start":417,"line_end":417,"column_start":5,"column_end":8},"name":"N25","qualname":"::N25","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1038},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":15059,"byte_end":15062,"line_start":418,"line_end":418,"column_start":5,"column_end":8},"name":"N26","qualname":"::N26","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1077},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":15142,"byte_end":15145,"line_start":419,"line_end":419,"column_start":5,"column_end":8},"name":"N27","qualname":"::N27","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1116},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":15228,"byte_end":15231,"line_start":420,"line_end":420,"column_start":5,"column_end":8},"name":"N28","qualname":"::N28","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1155},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":15317,"byte_end":15320,"line_start":421,"line_end":421,"column_start":5,"column_end":8},"name":"N29","qualname":"::N29","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1194},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":15409,"byte_end":15412,"line_start":422,"line_end":422,"column_start":5,"column_end":8},"name":"N30","qualname":"::N30","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1233},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":15504,"byte_end":15507,"line_start":423,"line_end":423,"column_start":5,"column_end":8},"name":"N31","qualname":"::N31","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1272},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":15602,"byte_end":15605,"line_start":424,"line_end":424,"column_start":5,"column_end":8},"name":"N32","qualname":"::N32","value":"","parent":null,"children":[],"decl_id":null,"docs":" A typified version of a number of channels.\n","sig":null,"attributes":[{"value":"/ A typified version of a number of channels.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":9230,"byte_end":9277,"line_start":264,"line_end":264,"column_start":13,"column_end":60}}]}],"impls":[{"id":14,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":20342,"byte_end":20350,"line_start":557,"line_end":557,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":20624,"byte_end":20632,"line_start":571,"line_end":571,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":625,"byte_end":629,"line_start":17,"line_end":17,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":6}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":632,"byte_end":637,"line_start":17,"line_end":17,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2640},"to":{"krate":0,"index":6}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":640,"byte_end":649,"line_start":17,"line_end":17,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2670},"to":{"krate":0,"index":6}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":20342,"byte_end":20350,"line_start":557,"line_end":557,"column_start":22,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":56},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_frame-0.11.0/src/lib.rs","byte_start":20624,"byte_end":20632,"line_start":571,"line_end":571,"column_start":31,"column_end":39},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":56},"to":{"krate":2,"index":7702}}]}