{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7","program":"/usr/bin/rls","arguments":["--crate-name","miniz_oxide","--edition=2018","/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=07ffd3cb1475cce6","-C","extra-filename=-07ffd3cb1475cce6","--out-dir","/home/louie/Programs/maquinitas/target/rls/debug/deps","-L","dependency=/home/louie/Programs/maquinitas/target/rls/debug/deps","--extern","adler32=/home/louie/Programs/maquinitas/target/rls/debug/deps/libadler32-4c06ec0bddd8bd19.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/usr"],"output":"/home/louie/Programs/maquinitas/target/rls/debug/deps/libminiz_oxide-07ffd3cb1475cce6.rmeta"},"prelude":{"crate_id":{"name":"miniz_oxide","disambiguator":[7609594451715812998,0]},"crate_root":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src","external_crates":[{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12023920652292776473,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[8607811298988957190,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9950803289178341956,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13474909584011716809,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14989130687617550202,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16102964373074206153,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5778140418855102640,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4313679198529278428,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4133710094375488264,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7595865551076237336,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7540130326731804087,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[12866123005810308726,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[1553467655670750388,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[15291019179027074616,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[985971798445026598,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13801465309967224704,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[2515263550385514547,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[15896354199165419201,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[14578328142683063560,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","num":20,"id":{"name":"adler32","disambiguator":[15538313033435264589,0]}}],"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":0,"byte_end":4325,"line_start":1,"line_end":158,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":642},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":887,"byte_end":901,"line_start":32,"line_end":32,"column_start":24,"column_end":38},"alias_span":null,"name":"mz_adler32_oxide","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":638},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":947,"byte_end":962,"line_start":33,"line_end":33,"column_start":25,"column_end":40},"alias_span":null,"name":"MZ_ADLER32_INIT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":639},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":964,"byte_end":986,"line_start":33,"line_end":33,"column_start":42,"column_end":64},"alias_span":null,"name":"MZ_DEFAULT_WINDOW_BITS","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":0,"byte_end":4325,"line_start":1,"line_end":158,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":397},{"krate":0,"index":634},{"krate":0,"index":643},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":650},{"krate":0,"index":956},{"krate":0,"index":975},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":986},{"krate":0,"index":653},{"krate":0,"index":989},{"krate":0,"index":999},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1013},{"krate":0,"index":1035},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1049},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1065},{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":1068},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":663}],"decl_id":null,"docs":" A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)\n DEFLATE/zlib encoder/decoder.\n The plan for this crate is to be used as a back-end for the\n [flate2](https://github.com/alexcrichton/flate2-rs) crate and eventually remove the\n need to depend on a C library.","sig":null,"attributes":[{"value":"/ A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":0,"byte_end":80,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"/ DEFLATE/zlib encoder/decoder.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":81,"byte_end":114,"line_start":2,"line_end":2,"column_start":1,"column_end":34}},{"value":"/ The plan for this crate is to be used as a back-end for the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":115,"byte_end":178,"line_start":3,"line_end":3,"column_start":1,"column_end":64}},{"value":"/ [flate2](https://github.com/alexcrichton/flate2-rs) crate and eventually remove the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":179,"byte_end":266,"line_start":4,"line_end":4,"column_start":1,"column_end":88}},{"value":"/ need to depend on a C library.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":267,"byte_end":301,"line_start":5,"line_end":5,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":302,"byte_end":305,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":306,"byte_end":317,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ ## Simple compression/decompression:","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":318,"byte_end":358,"line_start":8,"line_end":8,"column_start":1,"column_end":41}},{"value":"/ ``` rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":359,"byte_end":371,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":372,"byte_end":375,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ use miniz_oxide::inflate::decompress_to_vec;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":376,"byte_end":424,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/ use miniz_oxide::deflate::compress_to_vec;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":425,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ fn roundtrip(data: &[u8]) {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":476,"byte_end":507,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/     let compressed = compress_to_vec(data, 6);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":508,"byte_end":558,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/     let decompressed = decompress_to_vec(compressed.as_slice()).expect(\"Failed to decompress!\");","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":559,"byte_end":659,"line_start":16,"line_end":16,"column_start":1,"column_end":101}},{"value":"/ #   let _ = decompressed;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":660,"byte_end":689,"line_start":17,"line_end":17,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":690,"byte_end":695,"line_start":18,"line_end":18,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":696,"byte_end":699,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # roundtrip(b\"Test_data test data lalalal blabla\");","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":700,"byte_end":755,"line_start":20,"line_end":20,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":756,"byte_end":759,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":760,"byte_end":767,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":769,"byte_end":792,"line_start":24,"line_end":24,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"deflate","qualname":"::deflate","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":40},{"krate":0,"index":358},{"krate":0,"index":393},{"krate":0,"index":769},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":799},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396}],"decl_id":null,"docs":" This module contains functionality for compression.\n","sig":null,"attributes":[{"value":"/ This module contains functionality for compression.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4327,"byte_end":4382,"line_start":1,"line_end":1,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":40},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::deflate::core","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":665},{"krate":0,"index":667},{"krate":0,"index":669},{"krate":0,"index":671},{"krate":0,"index":673},{"krate":0,"index":675},{"krate":0,"index":677},{"krate":0,"index":115},{"krate":0,"index":679},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":117},{"krate":0,"index":685},{"krate":0,"index":701},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":742},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":164},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":196},{"krate":0,"index":200},{"krate":0,"index":206},{"krate":0,"index":212},{"krate":0,"index":218},{"krate":0,"index":224},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":263},{"krate":0,"index":284},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":304},{"krate":0,"index":322},{"krate":0,"index":327},{"krate":0,"index":334},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":355},{"krate":0,"index":357}],"decl_id":null,"docs":" Streaming compression functionality.\n","sig":null,"attributes":[{"value":"/ Streaming compression functionality.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":12920,"byte_end":12960,"line_start":1,"line_end":1,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":21629,"byte_end":21642,"line_start":163,"line_end":163,"column_start":9,"column_end":22},"name":"deflate_flags","qualname":"::deflate::core::deflate_flags","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":118},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":21698,"byte_end":21721,"line_start":165,"line_end":165,"column_start":15,"column_end":38},"name":"TDEFL_WRITE_ZLIB_HEADER","qualname":"::deflate::core::deflate_flags::TDEFL_WRITE_ZLIB_HEADER","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Whether to use a zlib wrapper.\n","sig":null,"attributes":[{"value":"/ Whether to use a zlib wrapper.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":21649,"byte_end":21683,"line_start":164,"line_end":164,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":119},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":21804,"byte_end":21825,"line_start":167,"line_end":167,"column_start":15,"column_end":36},"name":"TDEFL_COMPUTE_ADLER32","qualname":"::deflate::core::deflate_flags::TDEFL_COMPUTE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we compute the adler32 checksum.\n","sig":null,"attributes":[{"value":"/ Should we compute the adler32 checksum.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":21746,"byte_end":21789,"line_start":166,"line_end":166,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":120},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":21998,"byte_end":22023,"line_start":170,"line_end":170,"column_start":15,"column_end":40},"name":"TDEFL_GREEDY_PARSING_FLAG","qualname":"::deflate::core::deflate_flags::TDEFL_GREEDY_PARSING_FLAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more\n bytes to check for better matches.)\n","sig":null,"attributes":[{"value":"/ Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":21850,"byte_end":21939,"line_start":168,"line_end":168,"column_start":5,"column_end":94}},{"value":"/ bytes to check for better matches.)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":21944,"byte_end":21983,"line_start":169,"line_end":169,"column_start":5,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":121},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22177,"byte_end":22212,"line_start":173,"line_end":173,"column_start":15,"column_end":50},"name":"TDEFL_NONDETERMINISTIC_PARSING_FLAG","qualname":"::deflate::core::deflate_flags::TDEFL_NONDETERMINISTIC_PARSING_FLAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Used in miniz to skip zero-initializing hash and dict. We don't do this here, so\n this flag is ignored.\n","sig":null,"attributes":[{"value":"/ Used in miniz to skip zero-initializing hash and dict. We don't do this here, so","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22048,"byte_end":22132,"line_start":171,"line_end":171,"column_start":5,"column_end":89}},{"value":"/ this flag is ignored.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22137,"byte_end":22162,"line_start":172,"line_end":172,"column_start":5,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":122},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22299,"byte_end":22316,"line_start":175,"line_end":175,"column_start":15,"column_end":32},"name":"TDEFL_RLE_MATCHES","qualname":"::deflate::core::deflate_flags::TDEFL_RLE_MATCHES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Only look for matches with a distance of 0.\n","sig":null,"attributes":[{"value":"/ Only look for matches with a distance of 0.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22237,"byte_end":22284,"line_start":174,"line_end":174,"column_start":5,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":123},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22408,"byte_end":22428,"line_start":177,"line_end":177,"column_start":15,"column_end":35},"name":"TDEFL_FILTER_MATCHES","qualname":"::deflate::core::deflate_flags::TDEFL_FILTER_MATCHES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Only use matches that are at least 6 bytes long.\n","sig":null,"attributes":[{"value":"/ Only use matches that are at least 6 bytes long.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22341,"byte_end":22393,"line_start":176,"line_end":176,"column_start":5,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":124},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22611,"byte_end":22640,"line_start":180,"line_end":180,"column_start":15,"column_end":44},"name":"TDEFL_FORCE_ALL_STATIC_BLOCKS","qualname":"::deflate::core::deflate_flags::TDEFL_FORCE_ALL_STATIC_BLOCKS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Force the compressor to only output static blocks. (Blocks using the default huffman codes\n specified in the deflate specification.)\n","sig":null,"attributes":[{"value":"/ Force the compressor to only output static blocks. (Blocks using the default huffman codes","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22453,"byte_end":22547,"line_start":178,"line_end":178,"column_start":5,"column_end":99}},{"value":"/ specified in the deflate specification.)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22552,"byte_end":22596,"line_start":179,"line_end":179,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":125},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22744,"byte_end":22770,"line_start":182,"line_end":182,"column_start":15,"column_end":41},"name":"TDEFL_FORCE_ALL_RAW_BLOCKS","qualname":"::deflate::core::deflate_flags::TDEFL_FORCE_ALL_RAW_BLOCKS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Force the compressor to only output raw/uncompressed blocks.\n","sig":null,"attributes":[{"value":"/ Force the compressor to only output raw/uncompressed blocks.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22665,"byte_end":22729,"line_start":181,"line_end":181,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":686},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23059,"byte_end":23066,"line_start":192,"line_end":192,"column_start":5,"column_end":12},"name":"Default","qualname":"::deflate::core::CompressionStrategy::Default","value":"CompressionStrategy::Default","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":" Don't use any of the special strategies.\n","sig":null,"attributes":[{"value":"/ Don't use any of the special strategies.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23010,"byte_end":23054,"line_start":191,"line_end":191,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":689},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23133,"byte_end":23141,"line_start":194,"line_end":194,"column_start":5,"column_end":13},"name":"Filtered","qualname":"::deflate::core::CompressionStrategy::Filtered","value":"CompressionStrategy::Filtered","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":" Only use matches that are at least 5 bytes long.\n","sig":null,"attributes":[{"value":"/ Only use matches that are at least 5 bytes long.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23076,"byte_end":23128,"line_start":193,"line_end":193,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":692},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23217,"byte_end":23228,"line_start":196,"line_end":196,"column_start":5,"column_end":16},"name":"HuffmanOnly","qualname":"::deflate::core::CompressionStrategy::HuffmanOnly","value":"CompressionStrategy::HuffmanOnly","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":" Don't look for matches, only huffman encode the literals.\n","sig":null,"attributes":[{"value":"/ Don't look for matches, only huffman encode the literals.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23151,"byte_end":23212,"line_start":195,"line_end":195,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":695},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23323,"byte_end":23326,"line_start":198,"line_end":198,"column_start":5,"column_end":8},"name":"RLE","qualname":"::deflate::core::CompressionStrategy::RLE","value":"CompressionStrategy::RLE","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":" Only look for matches with a distance of 1, i.e do run-length encoding only.\n","sig":null,"attributes":[{"value":"/ Only look for matches with a distance of 1, i.e do run-length encoding only.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23238,"byte_end":23318,"line_start":197,"line_end":197,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":698},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23463,"byte_end":23468,"line_start":201,"line_end":201,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::deflate::core::CompressionStrategy::Fixed","value":"CompressionStrategy::Fixed","parent":{"krate":0,"index":685},"children":[],"decl_id":null,"docs":" Only use static/fixed blocks. (Blocks using the default huffman codes\n specified in the deflate specification.)\n","sig":null,"attributes":[{"value":"/ Only use static/fixed blocks. (Blocks using the default huffman codes","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23336,"byte_end":23409,"line_start":199,"line_end":199,"column_start":5,"column_end":78}},{"value":"/ specified in the deflate specification.)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23414,"byte_end":23458,"line_start":200,"line_end":200,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":685},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22984,"byte_end":23003,"line_start":190,"line_end":190,"column_start":10,"column_end":29},"name":"CompressionStrategy","qualname":"::deflate::core::CompressionStrategy","value":"pub enum CompressionStrategy {\n    Default = ,\n    Filtered = ,\n    HuffmanOnly = ,\n    RLE = ,\n    Fixed = ,\n}","parent":null,"children":[{"krate":0,"index":686},{"krate":0,"index":689},{"krate":0,"index":692},{"krate":0,"index":695},{"krate":0,"index":698}],"decl_id":null,"docs":" Strategy setting for compression.","sig":null,"attributes":[{"value":"/ Strategy setting for compression.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22794,"byte_end":22831,"line_start":185,"line_end":185,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22832,"byte_end":22835,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ The non-default settings offer some special-case compression variants.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22836,"byte_end":22910,"line_start":187,"line_end":187,"column_start":1,"column_end":75}},{"value":"repr(i32)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":22911,"byte_end":22923,"line_start":188,"line_end":188,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":716},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23685,"byte_end":23689,"line_start":209,"line_end":209,"column_start":5,"column_end":9},"name":"None","qualname":"::deflate::core::TDEFLFlush::None","value":"TDEFLFlush::None","parent":{"krate":0,"index":715},"children":[],"decl_id":null,"docs":" Compress as much as there is space for, and then return\n waiting for more input.\n","sig":null,"attributes":[{"value":"/ Compress as much as there is space for, and then return","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23589,"byte_end":23648,"line_start":207,"line_end":207,"column_start":5,"column_end":64}},{"value":"/ waiting for more input.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23653,"byte_end":23680,"line_start":208,"line_end":208,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":719},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23768,"byte_end":23772,"line_start":211,"line_end":211,"column_start":5,"column_end":9},"name":"Sync","qualname":"::deflate::core::TDEFLFlush::Sync","value":"TDEFLFlush::Sync","parent":{"krate":0,"index":715},"children":[],"decl_id":null,"docs":" Try to flush the current data and output an empty raw block.\n","sig":null,"attributes":[{"value":"/ Try to flush the current data and output an empty raw block.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23699,"byte_end":23763,"line_start":210,"line_end":210,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":722},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23898,"byte_end":23902,"line_start":214,"line_end":214,"column_start":5,"column_end":9},"name":"Full","qualname":"::deflate::core::TDEFLFlush::Full","value":"TDEFLFlush::Full","parent":{"krate":0,"index":715},"children":[],"decl_id":null,"docs":" Same as sync, but reset the dictionary so that the following data does not depend\n on previous data.\n","sig":null,"attributes":[{"value":"/ Same as sync, but reset the dictionary so that the following data does not depend","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23782,"byte_end":23867,"line_start":212,"line_end":212,"column_start":5,"column_end":90}},{"value":"/ on previous data.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23872,"byte_end":23893,"line_start":213,"line_end":213,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":725},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23964,"byte_end":23970,"line_start":216,"line_end":216,"column_start":5,"column_end":11},"name":"Finish","qualname":"::deflate::core::TDEFLFlush::Finish","value":"TDEFLFlush::Finish","parent":{"krate":0,"index":715},"children":[],"decl_id":null,"docs":" Try to flush everything and end the stream.\n","sig":null,"attributes":[{"value":"/ Try to flush everything and end the stream.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23912,"byte_end":23959,"line_start":215,"line_end":215,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":715},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23572,"byte_end":23582,"line_start":206,"line_end":206,"column_start":10,"column_end":20},"name":"TDEFLFlush","qualname":"::deflate::core::TDEFLFlush","value":"pub enum TDEFLFlush { None = , Sync = , Full = , Finish = , }","parent":null,"children":[{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725}],"decl_id":null,"docs":" A list of deflate flush types.\n","sig":null,"attributes":[{"value":"/ A list of deflate flush types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":23477,"byte_end":23511,"line_start":204,"line_end":204,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":24378,"byte_end":24381,"line_start":232,"line_end":232,"column_start":12,"column_end":15},"name":"new","qualname":"<TDEFLFlush>::new","value":"pub fn new(i32) -> Result<Self, MZError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":743},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":24774,"byte_end":24782,"line_start":247,"line_end":247,"column_start":5,"column_end":13},"name":"BadParam","qualname":"::deflate::core::TDEFLStatus::BadParam","value":"TDEFLStatus::BadParam","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":746},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":24793,"byte_end":24805,"line_start":248,"line_end":248,"column_start":5,"column_end":17},"name":"PutBufFailed","qualname":"::deflate::core::TDEFLStatus::PutBufFailed","value":"TDEFLStatus::PutBufFailed","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":749},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":24816,"byte_end":24820,"line_start":249,"line_end":249,"column_start":5,"column_end":9},"name":"Okay","qualname":"::deflate::core::TDEFLStatus::Okay","value":"TDEFLStatus::Okay","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":752},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":24830,"byte_end":24834,"line_start":250,"line_end":250,"column_start":5,"column_end":9},"name":"Done","qualname":"::deflate::core::TDEFLStatus::Done","value":"TDEFLStatus::Done","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":742},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":24756,"byte_end":24767,"line_start":246,"line_end":246,"column_start":10,"column_end":21},"name":"TDEFLStatus","qualname":"::deflate::core::TDEFLStatus","value":"pub enum TDEFLStatus { BadParam = , PutBufFailed = , Okay = , Done = , }","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":746},{"krate":0,"index":749},{"krate":0,"index":752}],"decl_id":null,"docs":" Return status codes.\n","sig":null,"attributes":[{"value":"/ Return status codes.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":24658,"byte_end":24682,"line_start":243,"line_end":243,"column_start":1,"column_end":25}},{"value":"repr(i32)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":24683,"byte_end":24695,"line_start":244,"line_end":244,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":159},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":29222,"byte_end":29237,"line_start":389,"line_end":389,"column_start":12,"column_end":27},"name":"CompressorOxide","qualname":"::deflate::core::CompressorOxide","value":"CompressorOxide {  }","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"decl_id":null,"docs":" Main compression struct.\n","sig":null,"attributes":[{"value":"/ Main compression struct.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":29182,"byte_end":29210,"line_start":388,"line_end":388,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":29535,"byte_end":29538,"line_start":401,"line_end":401,"column_start":12,"column_end":15},"name":"new","qualname":"<CompressorOxide>::new","value":"pub fn new(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `CompressorOxide` with the given flags.","sig":null,"attributes":[{"value":"/ Create a new `CompressorOxide` with the given flags.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":29362,"byte_end":29418,"line_start":397,"line_end":397,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":29423,"byte_end":29426,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":29431,"byte_end":29442,"line_start":399,"line_end":399,"column_start":5,"column_end":16}},{"value":"/ This function may be changed to take different parameters in the future.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":29447,"byte_end":29523,"line_start":400,"line_end":400,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":29944,"byte_end":29951,"line_start":413,"line_end":413,"column_start":12,"column_end":19},"name":"adler32","qualname":"<CompressorOxide>::adler32","value":"pub fn adler32(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the adler32 checksum of the currently encoded data.\n","sig":null,"attributes":[{"value":"/ Get the adler32 checksum of the currently encoded data.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":29873,"byte_end":29932,"line_start":412,"line_end":412,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30126,"byte_end":30144,"line_start":419,"line_end":419,"column_start":12,"column_end":30},"name":"prev_return_status","qualname":"<CompressorOxide>::prev_return_status","value":"pub fn prev_return_status(&Self) -> TDEFLStatus","parent":null,"children":[],"decl_id":null,"docs":" Get the return status of the previous [`compress`](fn.compress.html)\n call with this compressor.\n","sig":null,"attributes":[{"value":"/ Get the return status of the previous [`compress`](fn.compress.html)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30007,"byte_end":30079,"line_start":417,"line_end":417,"column_start":5,"column_end":77}},{"value":"/ call with this compressor.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30084,"byte_end":30114,"line_start":418,"line_end":418,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30383,"byte_end":30388,"line_start":427,"line_end":427,"column_start":12,"column_end":17},"name":"flags","qualname":"<CompressorOxide>::flags","value":"pub fn flags(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Get the raw compressor flags.","sig":null,"attributes":[{"value":"/ Get the raw compressor flags.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30219,"byte_end":30252,"line_start":423,"line_end":423,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30257,"byte_end":30260,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30265,"byte_end":30276,"line_start":425,"line_end":425,"column_start":5,"column_end":16}},{"value":"/ This function may be deprecated or changed in the future to use more rust-style flags.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30281,"byte_end":30371,"line_start":426,"line_end":426,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30541,"byte_end":30552,"line_start":432,"line_end":432,"column_start":12,"column_end":23},"name":"data_format","qualname":"<CompressorOxide>::data_format","value":"pub fn data_format(&Self) -> DataFormat","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the compressor is wrapping the data in a zlib format or not.\n","sig":null,"attributes":[{"value":"/ Returns whether the compressor is wrapping the data in a zlib format or not.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30449,"byte_end":30529,"line_start":431,"line_end":431,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30862,"byte_end":30867,"line_start":443,"line_end":443,"column_start":12,"column_end":17},"name":"reset","qualname":"<CompressorOxide>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the state of the compressor, keeping the same parameters.","sig":null,"attributes":[{"value":"/ Reset the state of the compressor, keeping the same parameters.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30735,"byte_end":30802,"line_start":440,"line_end":440,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30807,"byte_end":30810,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ This avoids re-allocating data.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":30815,"byte_end":30850,"line_start":442,"line_end":442,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31403,"byte_end":31424,"line_start":457,"line_end":457,"column_start":12,"column_end":33},"name":"set_compression_level","qualname":"<CompressorOxide>::set_compression_level","value":"pub fn set_compression_level(&mut Self, CompressionLevel)","parent":null,"children":[],"decl_id":null,"docs":" Set the compression level of the compressor.","sig":null,"attributes":[{"value":"/ Set the compression level of the compressor.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31154,"byte_end":31202,"line_start":452,"line_end":452,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31207,"byte_end":31210,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Using this to change level after compresson has started is supported.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31215,"byte_end":31288,"line_start":454,"line_end":454,"column_start":5,"column_end":78}},{"value":"/ # Notes","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31293,"byte_end":31304,"line_start":455,"line_end":455,"column_start":5,"column_end":16}},{"value":"/ The compression strategy will be reset to the default one when this is called.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31309,"byte_end":31391,"line_start":456,"line_end":456,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31843,"byte_end":31868,"line_start":467,"line_end":467,"column_start":12,"column_end":37},"name":"set_compression_level_raw","qualname":"<CompressorOxide>::set_compression_level_raw","value":"pub fn set_compression_level_raw(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the compression level of the compressor using an integer value.","sig":null,"attributes":[{"value":"/ Set the compression level of the compressor using an integer value.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31571,"byte_end":31642,"line_start":462,"line_end":462,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31647,"byte_end":31650,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Using this to change level after compresson has started is supported.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31655,"byte_end":31728,"line_start":464,"line_end":464,"column_start":5,"column_end":78}},{"value":"/ # Notes","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31733,"byte_end":31744,"line_start":465,"line_end":465,"column_start":5,"column_end":16}},{"value":"/ The compression strategy will be reset to the default one when this is called.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31749,"byte_end":31831,"line_start":466,"line_end":466,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":32460,"byte_end":32480,"line_start":481,"line_end":481,"column_start":12,"column_end":32},"name":"set_format_and_level","qualname":"<CompressorOxide>::set_format_and_level","value":"pub fn set_format_and_level(&mut Self, DataFormat, u8)","parent":null,"children":[],"decl_id":null,"docs":" Update the compression settings of the compressor.","sig":null,"attributes":[{"value":"/ Update the compression settings of the compressor.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":31995,"byte_end":32049,"line_start":472,"line_end":472,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":32054,"byte_end":32057,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Changing the `DataFormat` after compression has started will result in","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":32062,"byte_end":32136,"line_start":474,"line_end":474,"column_start":5,"column_end":79}},{"value":"/ a corrupted stream.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":32141,"byte_end":32164,"line_start":475,"line_end":475,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":32169,"byte_end":32172,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":32177,"byte_end":32188,"line_start":477,"line_end":477,"column_start":5,"column_end":16}},{"value":"/ This function mainly intented for setting the initial settings after e.g creating with","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":32193,"byte_end":32283,"line_start":478,"line_end":478,"column_start":5,"column_end":95}},{"value":"/ `default` or after calling `CompressorOxide::reset()`, and behaviour may be changed","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":32288,"byte_end":32375,"line_start":479,"line_end":479,"column_start":5,"column_end":92}},{"value":"/ to disallow calling it after starting compression in the future.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":32380,"byte_end":32448,"line_start":480,"line_end":480,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":176},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":33384,"byte_end":33396,"line_start":509,"line_end":509,"column_start":12,"column_end":24},"name":"CallbackFunc","qualname":"::deflate::core::CallbackFunc","value":"CallbackFunc { put_buf_func }","parent":null,"children":[{"krate":0,"index":178}],"decl_id":null,"docs":" Callback function and user used in `compress_to_output`.\n","sig":null,"attributes":[{"value":"/ Callback function and user used in `compress_to_output`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":33312,"byte_end":33372,"line_start":508,"line_end":508,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":178},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":33411,"byte_end":33423,"line_start":510,"line_end":510,"column_start":9,"column_end":21},"name":"put_buf_func","qualname":"::deflate::core::CallbackFunc::put_buf_func","value":"&'a mut (dyn for<'r> std::ops::FnMut(&'r [u8]) -> bool + 'a)","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":352},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":92007,"byte_end":92015,"line_start":2162,"line_end":2162,"column_start":8,"column_end":16},"name":"compress","qualname":"::deflate::core::compress","value":"pub fn compress(&mut CompressorOxide, &[u8], &mut [u8], TDEFLFlush)\n-> (TDEFLStatus, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main compression function. Tries to compress as much as possible from `in_buf` and\n puts compressed output into `out_buf`.","sig":null,"attributes":[{"value":"/ Main compression function. Tries to compress as much as possible from `in_buf` and","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":91496,"byte_end":91582,"line_start":2152,"line_end":2152,"column_start":1,"column_end":87}},{"value":"/ puts compressed output into `out_buf`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":91583,"byte_end":91625,"line_start":2153,"line_end":2153,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":91626,"byte_end":91629,"line_start":2154,"line_end":2154,"column_start":1,"column_end":4}},{"value":"/ The value of `flush` determines if the compressor should attempt to flush all output","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":91630,"byte_end":91718,"line_start":2155,"line_end":2155,"column_start":1,"column_end":89}},{"value":"/ and alternatively try to finish the stream.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":91719,"byte_end":91766,"line_start":2156,"line_end":2156,"column_start":1,"column_end":48}},{"value":"/ Should be `TDeflflush::Finish` on the final call.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":91767,"byte_end":91820,"line_start":2157,"line_end":2157,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":91821,"byte_end":91824,"line_start":2158,"line_end":2158,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":91825,"byte_end":91838,"line_start":2159,"line_end":2159,"column_start":1,"column_end":14}},{"value":"/ Returns a tuple containing the current status of the compressor, the current position","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":91839,"byte_end":91928,"line_start":2160,"line_end":2160,"column_start":1,"column_end":90}},{"value":"/ in the input buffer and the current position in the output buffer.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":91929,"byte_end":91999,"line_start":2161,"line_end":2161,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":353},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":92567,"byte_end":92585,"line_start":2183,"line_end":2183,"column_start":8,"column_end":26},"name":"compress_to_output","qualname":"::deflate::core::compress_to_output","value":"pub fn compress_to_output<impl FnMut(&[u8]) -> bool: FnMut(&[u8]) ->\n                          bool>(&mut CompressorOxide, &[u8], TDEFLFlush,\n                                impl FnMut(&[u8]) -> bool)\n-> (TDEFLStatus, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main compression function. Callbacks output.","sig":null,"attributes":[{"value":"/ Main compression function. Callbacks output.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":92265,"byte_end":92313,"line_start":2175,"line_end":2175,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":92314,"byte_end":92317,"line_start":2176,"line_end":2176,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":92318,"byte_end":92331,"line_start":2177,"line_end":2177,"column_start":1,"column_end":14}},{"value":"/ Returns a tuple containing the current status of the compressor, the current position","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":92332,"byte_end":92421,"line_start":2178,"line_end":2178,"column_start":1,"column_end":90}},{"value":"/ in the input buffer.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":92422,"byte_end":92446,"line_start":2179,"line_end":2179,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":92447,"byte_end":92450,"line_start":2180,"line_end":2180,"column_start":1,"column_end":4}},{"value":"/ The caller is responsible for ensuring the `CallbackFunc` struct will not cause undefined","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":92451,"byte_end":92544,"line_start":2181,"line_end":2181,"column_start":1,"column_end":94}},{"value":"/ behaviour.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":92545,"byte_end":92559,"line_start":2182,"line_end":2182,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":357},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":96554,"byte_end":96587,"line_start":2302,"line_end":2302,"column_start":8,"column_end":41},"name":"create_comp_flags_from_zip_params","qualname":"::deflate::core::create_comp_flags_from_zip_params","value":"pub fn create_comp_flags_from_zip_params(i32, i32, i32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Create a set of compression flags using parameters used by zlib and other compressors.\n Mainly intented for use with transition from c libraries as it deals with raw integers.","sig":null,"attributes":[{"value":"/ Create a set of compression flags using parameters used by zlib and other compressors.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":95905,"byte_end":95995,"line_start":2290,"line_end":2290,"column_start":1,"column_end":91}},{"value":"/ Mainly intented for use with transition from c libraries as it deals with raw integers.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":95996,"byte_end":96087,"line_start":2291,"line_end":2291,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":96088,"byte_end":96091,"line_start":2292,"line_end":2292,"column_start":1,"column_end":4}},{"value":"/ # Parameters","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":96092,"byte_end":96108,"line_start":2293,"line_end":2293,"column_start":1,"column_end":17}},{"value":"/ `level` determines compression level. Clamped to maximum of 10. Negative values result in","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":96109,"byte_end":96202,"line_start":2294,"line_end":2294,"column_start":1,"column_end":94}},{"value":"/ `Compressionlevel::DefaultLevel`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":96203,"byte_end":96240,"line_start":2295,"line_end":2295,"column_start":1,"column_end":38}},{"value":"/ `window_bits`: Above 0, wraps the stream in a zlib wrapper, 0 or negative for a raw deflate","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":96241,"byte_end":96336,"line_start":2296,"line_end":2296,"column_start":1,"column_end":96}},{"value":"/ stream.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":96337,"byte_end":96348,"line_start":2297,"line_end":2297,"column_start":1,"column_end":12}},{"value":"/ `strategy`: Sets the strategy if this conforms to any of the values in `CompressionStrategy`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":96349,"byte_end":96446,"line_start":2298,"line_end":2298,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":96447,"byte_end":96450,"line_start":2299,"line_end":2299,"column_start":1,"column_end":4}},{"value":"/ # Notes","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":96451,"byte_end":96462,"line_start":2300,"line_end":2300,"column_start":1,"column_end":12}},{"value":"/ This function may be removed or moved to the `miniz_oxide_c_api` in the future.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":96463,"byte_end":96546,"line_start":2301,"line_end":2301,"column_start":1,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":358},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::deflate::stream","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":363},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":370},{"krate":0,"index":373},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":389},{"krate":0,"index":392}],"decl_id":null,"docs":" Extra streaming compression functionality.","sig":null,"attributes":[{"value":"/ Extra streaming compression functionality.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99093,"byte_end":99139,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99140,"byte_end":99143,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ As of now this is mainly inteded for use to build a higher-level wrapper.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99144,"byte_end":99221,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99222,"byte_end":99225,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ There is no DeflateState as the needed state is contained in the compressor struct itself.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99226,"byte_end":99320,"line_start":5,"line_end":5,"column_start":1,"column_end":95}}]},{"kind":"Function","id":{"krate":0,"index":392},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99871,"byte_end":99878,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"deflate","qualname":"::deflate::stream::deflate","value":"pub fn deflate(&mut CompressorOxide, &[u8], &mut [u8], MZFlush)\n-> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Try to compress from input to output with the given Compressor","sig":null,"attributes":[{"value":"/ Try to compress from input to output with the given Compressor","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99492,"byte_end":99558,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99559,"byte_end":99562,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99563,"byte_end":99575,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99576,"byte_end":99579,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Returns `MZError::Buf` If the size of the `output` slice is empty or no progress was made due to","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99580,"byte_end":99680,"line_start":15,"line_end":15,"column_start":1,"column_end":101}},{"value":"/ lack of expected input data or called after the compression was finished without","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99681,"byte_end":99765,"line_start":16,"line_end":16,"column_start":1,"column_end":85}},{"value":"/ MZFlush::Finish.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99766,"byte_end":99786,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99787,"byte_end":99790,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Returns `MZError::Param` if the compressor parameters are set wrong.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/stream.rs","byte_start":99791,"byte_end":99863,"line_start":19,"line_end":19,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":770},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4865,"byte_end":4878,"line_start":15,"line_end":15,"column_start":5,"column_end":18},"name":"NoCompression","qualname":"::deflate::CompressionLevel::NoCompression","value":"CompressionLevel::NoCompression","parent":{"krate":0,"index":769},"children":[],"decl_id":null,"docs":" Don't do any compression, only output uncompressed blocks.\n","sig":null,"attributes":[{"value":"/ Don't do any compression, only output uncompressed blocks.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4798,"byte_end":4860,"line_start":14,"line_end":14,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":773},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4978,"byte_end":4987,"line_start":17,"line_end":17,"column_start":5,"column_end":14},"name":"BestSpeed","qualname":"::deflate::CompressionLevel::BestSpeed","value":"CompressionLevel::BestSpeed","parent":{"krate":0,"index":769},"children":[],"decl_id":null,"docs":" Fast compression. Uses a special compression routine that is optimized for speed.\n","sig":null,"attributes":[{"value":"/ Fast compression. Uses a special compression routine that is optimized for speed.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4888,"byte_end":4973,"line_start":16,"line_end":16,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":776},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":5076,"byte_end":5091,"line_start":19,"line_end":19,"column_start":5,"column_end":20},"name":"BestCompression","qualname":"::deflate::CompressionLevel::BestCompression","value":"CompressionLevel::BestCompression","parent":{"krate":0,"index":769},"children":[],"decl_id":null,"docs":" Slow/high compression. Do a lot of checks to try to find good matches.\n","sig":null,"attributes":[{"value":"/ Slow/high compression. Do a lot of checks to try to find good matches.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4997,"byte_end":5071,"line_start":18,"line_end":18,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":779},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":5145,"byte_end":5160,"line_start":21,"line_end":21,"column_start":5,"column_end":20},"name":"UberCompression","qualname":"::deflate::CompressionLevel::UberCompression","value":"CompressionLevel::UberCompression","parent":{"krate":0,"index":769},"children":[],"decl_id":null,"docs":" Even more checks, can be very slow.\n","sig":null,"attributes":[{"value":"/ Even more checks, can be very slow.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":5101,"byte_end":5140,"line_start":20,"line_end":20,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":782},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":5229,"byte_end":5241,"line_start":23,"line_end":23,"column_start":5,"column_end":17},"name":"DefaultLevel","qualname":"::deflate::CompressionLevel::DefaultLevel","value":"CompressionLevel::DefaultLevel","parent":{"krate":0,"index":769},"children":[],"decl_id":null,"docs":" Default compromise between speed and compression.\n","sig":null,"attributes":[{"value":"/ Default compromise between speed and compression.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":5171,"byte_end":5224,"line_start":22,"line_end":22,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":785},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":5294,"byte_end":5312,"line_start":25,"line_end":25,"column_start":5,"column_end":23},"name":"DefaultCompression","qualname":"::deflate::CompressionLevel::DefaultCompression","value":"CompressionLevel::DefaultCompression","parent":{"krate":0,"index":769},"children":[],"decl_id":null,"docs":" Use the default compression level.\n","sig":null,"attributes":[{"value":"/ Use the default compression level.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":5251,"byte_end":5289,"line_start":24,"line_end":24,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":769},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4775,"byte_end":4791,"line_start":13,"line_end":13,"column_start":10,"column_end":26},"name":"CompressionLevel","qualname":"::deflate::CompressionLevel","value":"pub enum CompressionLevel {\n    NoCompression = ,\n    BestSpeed = ,\n    BestCompression = ,\n    UberCompression = ,\n    DefaultLevel = ,\n    DefaultCompression = ,\n}","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":779},{"krate":0,"index":782},{"krate":0,"index":785}],"decl_id":null,"docs":" How much processing the compressor should do to compress the data.\n `NoCompression` and `Bestspeed` have special meanings, the other levels determine the number\n of checks for matches in the hash chains and whether to use lazy or greedy parsing.\n","sig":null,"attributes":[{"value":"/ How much processing the compressor should do to compress the data.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4446,"byte_end":4516,"line_start":8,"line_end":8,"column_start":1,"column_end":71}},{"value":"/ `NoCompression` and `Bestspeed` have special meanings, the other levels determine the number","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4517,"byte_end":4613,"line_start":9,"line_end":9,"column_start":1,"column_end":97}},{"value":"/ of checks for matches in the hash chains and whether to use lazy or greedy parsing.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4614,"byte_end":4701,"line_start":10,"line_end":10,"column_start":1,"column_end":88}},{"value":"repr(i32)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4702,"byte_end":4714,"line_start":11,"line_end":11,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":394},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":7407,"byte_end":7422,"line_start":107,"line_end":107,"column_start":8,"column_end":23},"name":"compress_to_vec","qualname":"::deflate::compress_to_vec","value":"pub fn compress_to_vec(&[u8], u8) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the input data to a vector, using the specified compression level (0-10).\n","sig":null,"attributes":[{"value":"/ Compress the input data to a vector, using the specified compression level (0-10).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":7313,"byte_end":7399,"line_start":106,"line_end":106,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":395},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":7633,"byte_end":7653,"line_start":113,"line_end":113,"column_start":8,"column_end":28},"name":"compress_to_vec_zlib","qualname":"::deflate::compress_to_vec_zlib","value":"pub fn compress_to_vec_zlib(&[u8], u8) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the input data to a vector, using the specified compression level (0-10), and with a\n zlib wrapper.\n","sig":null,"attributes":[{"value":"/ Compress the input data to a vector, using the specified compression level (0-10), and with a","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":7510,"byte_end":7607,"line_start":111,"line_end":111,"column_start":1,"column_end":98}},{"value":"/ zlib wrapper.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":7608,"byte_end":7625,"line_start":112,"line_end":112,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":397},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inflate","qualname":"::inflate","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":535},{"krate":0,"index":550},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":920},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":953},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633}],"decl_id":null,"docs":" This module contains functionality for decompression.\n","sig":null,"attributes":[{"value":"/ This module contains functionality for decompression.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":102951,"byte_end":103008,"line_start":1,"line_end":1,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":404},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::inflate::core","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":434},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":482},{"krate":0,"index":486},{"krate":0,"index":802},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":883},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":885},{"krate":0,"index":887},{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":529},{"krate":0,"index":893},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534}],"decl_id":null,"docs":" Streaming decompression functionality.\n","sig":null,"attributes":[{"value":"/ Streaming decompression functionality.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":107214,"byte_end":107256,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":426},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":107433,"byte_end":107451,"line_start":11,"line_end":11,"column_start":11,"column_end":29},"name":"TINFL_LZ_DICT_SIZE","qualname":"::inflate::core::TINFL_LZ_DICT_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":452},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":111064,"byte_end":111077,"line_start":105,"line_end":105,"column_start":9,"column_end":22},"name":"inflate_flags","qualname":"::inflate::core::inflate_flags","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":453},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":111140,"byte_end":111168,"line_start":107,"line_end":107,"column_start":15,"column_end":43},"name":"TINFL_FLAG_PARSE_ZLIB_HEADER","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_PARSE_ZLIB_HEADER","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we try to parse a zlib header?\n","sig":null,"attributes":[{"value":"/ Should we try to parse a zlib header?","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":111084,"byte_end":111125,"line_start":106,"line_end":106,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":454},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":111269,"byte_end":111294,"line_start":109,"line_end":109,"column_start":15,"column_end":40},"name":"TINFL_FLAG_HAS_MORE_INPUT","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" There is more input that hasn't been given to the decompressor yet.\n","sig":null,"attributes":[{"value":"/ There is more input that hasn't been given to the decompressor yet.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":111183,"byte_end":111254,"line_start":108,"line_end":108,"column_start":5,"column_end":76}}]},{"kind":"Const","id":{"krate":0,"index":455},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":111369,"byte_end":111409,"line_start":111,"line_end":111,"column_start":15,"column_end":55},"name":"TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The output buffer should not wrap around.\n","sig":null,"attributes":[{"value":"/ The output buffer should not wrap around.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":111309,"byte_end":111354,"line_start":110,"line_end":110,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":456},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":111503,"byte_end":111529,"line_start":113,"line_end":113,"column_start":15,"column_end":41},"name":"TINFL_FLAG_COMPUTE_ADLER32","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_COMPUTE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we calculate the adler32 checksum of the output data?\n","sig":null,"attributes":[{"value":"/ Should we calculate the adler32 checksum of the output data?","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":111424,"byte_end":111488,"line_start":112,"line_end":112,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":461},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":111789,"byte_end":111806,"line_start":128,"line_end":128,"column_start":12,"column_end":29},"name":"DecompressorOxide","qualname":"::inflate::core::DecompressorOxide","value":"DecompressorOxide {  }","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480}],"decl_id":null,"docs":" Main decompression struct.","sig":null,"attributes":[{"value":"/ Main decompression struct.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":111743,"byte_end":111773,"line_start":126,"line_end":126,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":111774,"byte_end":111777,"line_start":127,"line_end":127,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":112987,"byte_end":112990,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"new","qualname":"<DecompressorOxide>::new","value":"pub fn new() -> DecompressorOxide","parent":null,"children":[],"decl_id":null,"docs":" Create a new tinfl_decompressor with all fields set to 0.\n","sig":null,"attributes":[{"value":"/ Create a new tinfl_decompressor with all fields set to 0.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":112914,"byte_end":112975,"line_start":164,"line_end":164,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":113127,"byte_end":113131,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"init","qualname":"<DecompressorOxide>::init","value":"pub fn init(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Set the current state to `Start`.\n","sig":null,"attributes":[{"value":"/ Set the current state to `Start`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":113064,"byte_end":113101,"line_start":169,"line_end":169,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":113106,"byte_end":113115,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":113358,"byte_end":113365,"line_start":178,"line_end":178,"column_start":12,"column_end":19},"name":"adler32","qualname":"<DecompressorOxide>::adler32","value":"pub fn adler32(&Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the adler32 checksum of the currently decompressed data.\n","sig":null,"attributes":[{"value":"/ Returns the adler32 checksum of the currently decompressed data.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":113264,"byte_end":113332,"line_start":176,"line_end":176,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":113337,"byte_end":113346,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":143476,"byte_end":143486,"line_start":1020,"line_end":1020,"column_start":8,"column_end":18},"name":"decompress","qualname":"::inflate::core::decompress","value":"pub fn decompress(&mut DecompressorOxide, &[u8], &mut Cursor<&mut [u8]>, u32)\n-> (TINFLStatus, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is\n empty, `out_cur` is full, the end of the deflate stream is hit, or there is an error in the\n deflate stream.","sig":null,"attributes":[{"value":"/ Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":141404,"byte_end":141497,"line_start":985,"line_end":985,"column_start":1,"column_end":94}},{"value":"/ empty, `out_cur` is full, the end of the deflate stream is hit, or there is an error in the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":141498,"byte_end":141593,"line_start":986,"line_end":986,"column_start":1,"column_end":96}},{"value":"/ deflate stream.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":141594,"byte_end":141613,"line_start":987,"line_end":987,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":141614,"byte_end":141617,"line_start":988,"line_end":988,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":141618,"byte_end":141633,"line_start":989,"line_end":989,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":141634,"byte_end":141637,"line_start":990,"line_end":990,"column_start":1,"column_end":4}},{"value":"/ `in_buf` is a reference to the compressed data that is to be decompressed. The decompressor will","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":141638,"byte_end":141738,"line_start":991,"line_end":991,"column_start":1,"column_end":101}},{"value":"/ start at the first byte of this buffer.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":141739,"byte_end":141782,"line_start":992,"line_end":992,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":141783,"byte_end":141786,"line_start":993,"line_end":993,"column_start":1,"column_end":4}},{"value":"/ `out_cur` is a mutable cursor into the buffer that will store the decompressed data, and that","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":141787,"byte_end":141884,"line_start":994,"line_end":994,"column_start":1,"column_end":98}},{"value":"/ stores previously decompressed data if any.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":141885,"byte_end":141932,"line_start":995,"line_end":995,"column_start":1,"column_end":48}},{"value":"/ * The position of the output cursor indicates where in the output buffer slice writing should","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":141933,"byte_end":142030,"line_start":996,"line_end":996,"column_start":1,"column_end":98}},{"value":"/ start.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142031,"byte_end":142041,"line_start":997,"line_end":997,"column_start":1,"column_end":11}},{"value":"/ * If TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF is not set, the output buffer is used in a","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142042,"byte_end":142134,"line_start":998,"line_end":998,"column_start":1,"column_end":93}},{"value":"/ wrapping manner, and it's size is required to be a power of 2.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142135,"byte_end":142201,"line_start":999,"line_end":999,"column_start":1,"column_end":67}},{"value":"/ * The decompression function normally needs access to 32KiB of the previously decompressed data","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142202,"byte_end":142301,"line_start":1000,"line_end":1000,"column_start":1,"column_end":100}},{"value":"/(or to the beginning of the decompressed data if less than 32KiB has been decompressed.)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142302,"byte_end":142393,"line_start":1001,"line_end":1001,"column_start":1,"column_end":92}},{"value":"/     - If this data is not available, decompression may fail.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142394,"byte_end":142458,"line_start":1002,"line_end":1002,"column_start":1,"column_end":65}},{"value":"/     - Some deflate compressors allow specifying a window size which limits match distances to","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142459,"byte_end":142556,"line_start":1003,"line_end":1003,"column_start":1,"column_end":98}},{"value":"/ less than this, or alternatively an RLE mode where matches will only refer to the previous byte","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142557,"byte_end":142656,"line_start":1004,"line_end":1004,"column_start":1,"column_end":100}},{"value":"/ and thus allows a smaller output buffer. The window size can be specified in the zlib","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142657,"byte_end":142746,"line_start":1005,"line_end":1005,"column_start":1,"column_end":90}},{"value":"/ header structure, however, the header data should not be relied on to be correct.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142747,"byte_end":142832,"line_start":1006,"line_end":1006,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142833,"byte_end":142836,"line_start":1007,"line_end":1007,"column_start":1,"column_end":4}},{"value":"/ `flags`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142837,"byte_end":142848,"line_start":1008,"line_end":1008,"column_start":1,"column_end":12}},{"value":"/ Flags to indicate settings and status to the decompression function.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142849,"byte_end":142921,"line_start":1009,"line_end":1009,"column_start":1,"column_end":73}},{"value":"/ * The `TINFL_FLAG_HAS_MORE_INPUT` has to be specified if more compressed data is to be provided","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":142922,"byte_end":143021,"line_start":1010,"line_end":1010,"column_start":1,"column_end":100}},{"value":"/ in a subsequent call to this function.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":143022,"byte_end":143064,"line_start":1011,"line_end":1011,"column_start":1,"column_end":43}},{"value":"/ * See the the [`inflate_flags`](inflate_flags/index.html) module for details on other flags.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":143065,"byte_end":143161,"line_start":1012,"line_end":1012,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":143162,"byte_end":143165,"line_start":1013,"line_end":1013,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":143166,"byte_end":143179,"line_start":1014,"line_end":1014,"column_start":1,"column_end":14}},{"value":"/ returns a tuple containing the status of the compressor, the number of input bytes read, and the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":143180,"byte_end":143280,"line_start":1015,"line_end":1015,"column_start":1,"column_end":101}},{"value":"/ number of bytes output to `out_cur`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":143281,"byte_end":143321,"line_start":1016,"line_end":1016,"column_start":1,"column_end":41}},{"value":"/ Updates the position of `out_cur` to point to the next free spot in the output buffer.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":143322,"byte_end":143412,"line_start":1017,"line_end":1017,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":143413,"byte_end":143416,"line_start":1018,"line_end":1018,"column_start":1,"column_end":4}},{"value":"/ This function shouldn't panic pending any bugs.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":143417,"byte_end":143468,"line_start":1019,"line_end":1019,"column_start":1,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":550},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::inflate::stream","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":581},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":606},{"krate":0,"index":609},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619}],"decl_id":null,"docs":" Extra streaming decompression functionality.","sig":null,"attributes":[{"value":"/ Extra streaming decompression functionality.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":181706,"byte_end":181754,"line_start":1,"line_end":1,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":181755,"byte_end":181758,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ As of now this is mainly inteded for use to build a higher-level wrapper.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":181759,"byte_end":181836,"line_start":3,"line_end":3,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":596},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":182188,"byte_end":182200,"line_start":13,"line_end":13,"column_start":12,"column_end":24},"name":"InflateState","qualname":"::inflate::stream::InflateState","value":"InflateState {  }","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605}],"decl_id":null,"docs":" A struct that compbines a decompressor with extra data for streaming decompression.","sig":null,"attributes":[{"value":"/ A struct that compbines a decompressor with extra data for streaming decompression.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":182085,"byte_end":182172,"line_start":11,"line_end":11,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":182173,"byte_end":182176,"line_start":12,"line_end":12,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183709,"byte_end":183712,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateState>::new","value":"pub fn new(DataFormat) -> InflateState","parent":null,"children":[],"decl_id":null,"docs":" Create a new state.","sig":null,"attributes":[{"value":"/ Create a new state.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183391,"byte_end":183414,"line_start":52,"line_end":52,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183419,"byte_end":183422,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that this struct is quite large due to internal buffers, and as such storing it on","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183427,"byte_end":183518,"line_start":54,"line_end":54,"column_start":5,"column_end":96}},{"value":"/ the stack is not recommended.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183523,"byte_end":183556,"line_start":55,"line_end":55,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183561,"byte_end":183564,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183569,"byte_end":183585,"line_start":57,"line_end":57,"column_start":5,"column_end":21}},{"value":"/ `data_format`: Determines whether the compressed data is assumed to wrapped with zlib","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183590,"byte_end":183679,"line_start":58,"line_end":58,"column_start":5,"column_end":94}},{"value":"/ metadata.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183684,"byte_end":183697,"line_start":59,"line_end":59,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184047,"byte_end":184056,"line_start":71,"line_end":71,"column_start":12,"column_end":21},"name":"new_boxed","qualname":"<InflateState>::new_boxed","value":"pub fn new_boxed(DataFormat) -> Box<InflateState>","parent":null,"children":[],"decl_id":null,"docs":" Create a new state on the heap.","sig":null,"attributes":[{"value":"/ Create a new state on the heap.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183859,"byte_end":183894,"line_start":66,"line_end":66,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183899,"byte_end":183902,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183907,"byte_end":183923,"line_start":68,"line_end":68,"column_start":5,"column_end":21}},{"value":"/ `data_format`: Determines whether the compressed data is assumed to wrapped with zlib","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183928,"byte_end":184017,"line_start":69,"line_end":69,"column_start":5,"column_end":94}},{"value":"/ metadata.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184022,"byte_end":184035,"line_start":70,"line_end":70,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184265,"byte_end":184277,"line_start":78,"line_end":78,"column_start":12,"column_end":24},"name":"decompressor","qualname":"<InflateState>::decompressor","value":"pub fn decompressor(&mut Self) -> &mut DecompressorOxide","parent":null,"children":[],"decl_id":null,"docs":" Access the innner decompressor.\n","sig":null,"attributes":[{"value":"/ Access the innner decompressor.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184218,"byte_end":184253,"line_start":77,"line_end":77,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184442,"byte_end":184453,"line_start":83,"line_end":83,"column_start":12,"column_end":23},"name":"last_status","qualname":"<InflateState>::last_status","value":"pub fn last_status(&Self) -> TINFLStatus","parent":null,"children":[],"decl_id":null,"docs":" Return the status of the last call to `inflate` with this `InflateState`.\n","sig":null,"attributes":[{"value":"/ Return the status of the last call to `inflate` with this `InflateState`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184353,"byte_end":184430,"line_start":82,"line_end":82,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184779,"byte_end":184805,"line_start":92,"line_end":92,"column_start":12,"column_end":38},"name":"new_boxed_with_window_bits","qualname":"<InflateState>::new_boxed_with_window_bits","value":"pub fn new_boxed_with_window_bits(i32) -> Box<InflateState>","parent":null,"children":[],"decl_id":null,"docs":" Create a new state using miniz/zlib style window bits parameter.","sig":null,"attributes":[{"value":"/ Create a new state using miniz/zlib style window bits parameter.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184514,"byte_end":184582,"line_start":87,"line_end":87,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184587,"byte_end":184590,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ The decompressor does not support different window sizes. As such,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184595,"byte_end":184665,"line_start":89,"line_end":89,"column_start":5,"column_end":75}},{"value":"/ any positive (>0) value will set the zlib header flag, while a negative one","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184670,"byte_end":184749,"line_start":90,"line_end":90,"column_start":5,"column_end":84}},{"value":"/ will not.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184754,"byte_end":184767,"line_start":91,"line_end":91,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":185095,"byte_end":185100,"line_start":100,"line_end":100,"column_start":12,"column_end":17},"name":"reset","qualname":"<InflateState>::reset","value":"pub fn reset(&mut Self, DataFormat)","parent":null,"children":[],"decl_id":null,"docs":" Reset the decompressor without re-allocating memory, using the given\n data format.\n","sig":null,"attributes":[{"value":"/ Reset the decompressor without re-allocating memory, using the given","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":184990,"byte_end":185062,"line_start":98,"line_end":98,"column_start":5,"column_end":77}},{"value":"/ data format.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":185067,"byte_end":185083,"line_start":99,"line_end":99,"column_start":5,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":185838,"byte_end":185845,"line_start":121,"line_end":121,"column_start":8,"column_end":15},"name":"inflate","qualname":"::inflate::stream::inflate","value":"pub fn inflate(&mut InflateState, &[u8], &mut [u8], MZFlush) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Try to decompress from `input` to `output` with the given `InflateState`","sig":null,"attributes":[{"value":"/ Try to decompress from `input` to `output` with the given `InflateState`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":185447,"byte_end":185523,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":185524,"byte_end":185527,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":185528,"byte_end":185540,"line_start":114,"line_end":114,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":185541,"byte_end":185544,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ Returns `MZError::Buf` If the size of the `output` slice is empty or no progress was made due to","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":185545,"byte_end":185645,"line_start":116,"line_end":116,"column_start":1,"column_end":101}},{"value":"/ lack of expected input data or called after the decompression was","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":185646,"byte_end":185715,"line_start":117,"line_end":117,"column_start":1,"column_end":70}},{"value":"/ finished without MZFlush::Finish.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":185716,"byte_end":185753,"line_start":118,"line_end":118,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":185754,"byte_end":185757,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ Returns `MZError::Param` if the compressor parameters are set wrong.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":185758,"byte_end":185830,"line_start":120,"line_end":120,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":921},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103678,"byte_end":103702,"line_start":25,"line_end":25,"column_start":5,"column_end":29},"name":"FailedCannotMakeProgress","qualname":"::inflate::TINFLStatus::FailedCannotMakeProgress","value":"TINFLStatus::FailedCannotMakeProgress","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" More input data was expected, but the caller indicated that there was more data, so the\n input stream is likely truncated.\n","sig":null,"attributes":[{"value":"/ More input data was expected, but the caller indicated that there was more data, so the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103540,"byte_end":103631,"line_start":23,"line_end":23,"column_start":5,"column_end":96}},{"value":"/ input stream is likely truncated.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103636,"byte_end":103673,"line_start":24,"line_end":24,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":924},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103815,"byte_end":103823,"line_start":27,"line_end":27,"column_start":5,"column_end":13},"name":"BadParam","qualname":"::inflate::TINFLStatus::BadParam","value":"TINFLStatus::BadParam","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" One or more of the input parameters were invalid.\n","sig":null,"attributes":[{"value":"/ One or more of the input parameters were invalid.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103757,"byte_end":103810,"line_start":26,"line_end":26,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":927},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103976,"byte_end":103991,"line_start":30,"line_end":30,"column_start":5,"column_end":20},"name":"Adler32Mismatch","qualname":"::inflate::TINFLStatus::Adler32Mismatch","value":"TINFLStatus::Adler32Mismatch","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" The decompression went fine, but the adler32 checksum did not match the one\n provided in the header.\n","sig":null,"attributes":[{"value":"/ The decompression went fine, but the adler32 checksum did not match the one","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103860,"byte_end":103939,"line_start":28,"line_end":28,"column_start":5,"column_end":84}},{"value":"/ provided in the header.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103944,"byte_end":103971,"line_start":29,"line_end":29,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":930},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":104085,"byte_end":104091,"line_start":32,"line_end":32,"column_start":5,"column_end":11},"name":"Failed","qualname":"::inflate::TINFLStatus::Failed","value":"TINFLStatus::Failed","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" Failed to decompress due to invalid data.\n","sig":null,"attributes":[{"value":"/ Failed to decompress due to invalid data.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":104035,"byte_end":104080,"line_start":31,"line_end":31,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":933},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":104171,"byte_end":104175,"line_start":34,"line_end":34,"column_start":5,"column_end":9},"name":"Done","qualname":"::inflate::TINFLStatus::Done","value":"TINFLStatus::Done","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" Finished decomression without issues.\n","sig":null,"attributes":[{"value":"/ Finished decomression without issues.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":104125,"byte_end":104166,"line_start":33,"line_end":33,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":936},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":104281,"byte_end":104295,"line_start":36,"line_end":36,"column_start":5,"column_end":19},"name":"NeedsMoreInput","qualname":"::inflate::TINFLStatus::NeedsMoreInput","value":"TINFLStatus::NeedsMoreInput","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" The decompressor needs more input data to continue decompressing.\n","sig":null,"attributes":[{"value":"/ The decompressor needs more input data to continue decompressing.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":104207,"byte_end":104276,"line_start":35,"line_end":35,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":939},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":104413,"byte_end":104426,"line_start":38,"line_end":38,"column_start":5,"column_end":18},"name":"HasMoreOutput","qualname":"::inflate::TINFLStatus::HasMoreOutput","value":"TINFLStatus::HasMoreOutput","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" There is still pending data that didn't fit in the output buffer.\n","sig":null,"attributes":[{"value":"/ There is still pending data that didn't fit in the output buffer.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":104339,"byte_end":104408,"line_start":37,"line_end":37,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":920},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103522,"byte_end":103533,"line_start":22,"line_end":22,"column_start":10,"column_end":21},"name":"TINFLStatus","qualname":"::inflate::TINFLStatus","value":"pub enum TINFLStatus {\n    FailedCannotMakeProgress = ,\n    BadParam = ,\n    Adler32Mismatch = ,\n    Failed = ,\n    Done = ,\n    NeedsMoreInput = ,\n    HasMoreOutput = ,\n}","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":927},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":939}],"decl_id":null,"docs":" Return status codes.\n","sig":null,"attributes":[{"value":"/ Return status codes.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103425,"byte_end":103449,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"repr(i8)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103450,"byte_end":103461,"line_start":20,"line_end":20,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":104498,"byte_end":104506,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"from_i32","qualname":"<TINFLStatus>::from_i32","value":"pub fn from_i32(i32) -> Option<TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":631},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":105254,"byte_end":105271,"line_start":61,"line_end":61,"column_start":8,"column_end":25},"name":"decompress_to_vec","qualname":"::inflate::decompress_to_vec","value":"pub fn decompress_to_vec(&[u8]) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data in `input` to a vector.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data in `input` to a vector.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":105078,"byte_end":105141,"line_start":57,"line_end":57,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":105142,"byte_end":105145,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Returns a status and an integer representing where the decompressor failed on failure.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":105146,"byte_end":105236,"line_start":59,"line_end":59,"column_start":1,"column_end":91}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":105237,"byte_end":105246,"line_start":60,"line_end":60,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":105559,"byte_end":105581,"line_start":69,"line_end":69,"column_start":8,"column_end":30},"name":"decompress_to_vec_zlib","qualname":"::inflate::decompress_to_vec_zlib","value":"pub fn decompress_to_vec_zlib(&[u8]) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":105361,"byte_end":105446,"line_start":65,"line_end":65,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":105447,"byte_end":105450,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Returns a status and an integer representing where the decompressor failed on failure.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":105451,"byte_end":105541,"line_start":67,"line_end":67,"column_start":1,"column_end":91}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":105542,"byte_end":105551,"line_start":68,"line_end":68,"column_start":1,"column_end":10}}]},{"kind":"Const","id":{"krate":0,"index":638},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/shared.rs","byte_start":192393,"byte_end":192408,"line_start":4,"line_end":4,"column_start":11,"column_end":26},"name":"MZ_ADLER32_INIT","qualname":"::shared::MZ_ADLER32_INIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":639},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/shared.rs","byte_start":192445,"byte_end":192467,"line_start":7,"line_end":7,"column_start":11,"column_end":33},"name":"MZ_DEFAULT_WINDOW_BITS","qualname":"::shared::MZ_DEFAULT_WINDOW_BITS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/shared.rs","byte_start":192621,"byte_end":192635,"line_start":14,"line_end":14,"column_start":8,"column_end":22},"name":"update_adler32","qualname":"::shared::update_adler32","value":"pub fn update_adler32(u32, &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":957},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1271,"byte_end":1275,"line_start":43,"line_end":43,"column_start":5,"column_end":9},"name":"None","qualname":"::MZFlush::None","value":"MZFlush::None","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Don't force any flushing.\n Used when more input data is expected.\n","sig":null,"attributes":[{"value":"/ Don't force any flushing.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1190,"byte_end":1219,"line_start":41,"line_end":41,"column_start":5,"column_end":34}},{"value":"/ Used when more input data is expected.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1224,"byte_end":1266,"line_start":42,"line_end":42,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":960},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1350,"byte_end":1357,"line_start":46,"line_end":46,"column_start":5,"column_end":12},"name":"Partial","qualname":"::MZFlush::Partial","value":"MZFlush::Partial","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Zlib partial flush.\n Currently treated as `Sync`.\n","sig":null,"attributes":[{"value":"/ Zlib partial flush.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1285,"byte_end":1308,"line_start":44,"line_end":44,"column_start":5,"column_end":28}},{"value":"/ Currently treated as `Sync`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1313,"byte_end":1345,"line_start":45,"line_end":45,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":963},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1491,"byte_end":1495,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"Sync","qualname":"::MZFlush::Sync","value":"MZFlush::Sync","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Finish compressing the currently buffered data, and output an empty raw block.\n Has no use in decompression.\n","sig":null,"attributes":[{"value":"/ Finish compressing the currently buffered data, and output an empty raw block.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1367,"byte_end":1449,"line_start":47,"line_end":47,"column_start":5,"column_end":87}},{"value":"/ Has no use in decompression.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1454,"byte_end":1486,"line_start":48,"line_end":48,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":966},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1697,"byte_end":1701,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"name":"Full","qualname":"::MZFlush::Full","value":"MZFlush::Full","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Same as `Sync`, but resets the compression dictionary so that further compressed\n data does not depend on data compressed before the flush.\n Has no use in decompression.\n","sig":null,"attributes":[{"value":"/ Same as `Sync`, but resets the compression dictionary so that further compressed","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1505,"byte_end":1589,"line_start":50,"line_end":50,"column_start":5,"column_end":89}},{"value":"/ data does not depend on data compressed before the flush.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1594,"byte_end":1655,"line_start":51,"line_end":51,"column_start":5,"column_end":66}},{"value":"/ Has no use in decompression.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1660,"byte_end":1692,"line_start":52,"line_end":52,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":969},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1775,"byte_end":1781,"line_start":55,"line_end":55,"column_start":5,"column_end":11},"name":"Finish","qualname":"::MZFlush::Finish","value":"MZFlush::Finish","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Attempt to flush the remaining data and end the stream.\n","sig":null,"attributes":[{"value":"/ Attempt to flush the remaining data and end the stream.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1711,"byte_end":1770,"line_start":54,"line_end":54,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":972},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1816,"byte_end":1821,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"Block","qualname":"::MZFlush::Block","value":"MZFlush::Block","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Not implemented.\n","sig":null,"attributes":[{"value":"/ Not implemented.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1791,"byte_end":1811,"line_start":56,"line_end":56,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":956},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1176,"byte_end":1183,"line_start":40,"line_end":40,"column_start":10,"column_end":17},"name":"MZFlush","qualname":"::MZFlush","value":"pub enum MZFlush {\n    None = ,\n    Partial = ,\n    Sync = ,\n    Full = ,\n    Finish = ,\n    Block = ,\n}","parent":null,"children":[{"krate":0,"index":957},{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":966},{"krate":0,"index":969},{"krate":0,"index":972}],"decl_id":null,"docs":" A list of flush types.","sig":null,"attributes":[{"value":"/ A list of flush types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":990,"byte_end":1016,"line_start":35,"line_end":35,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1017,"byte_end":1020,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ See [http://www.bolet.org/~pornin/deflate-flush.html] for more in-depth info.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1021,"byte_end":1102,"line_start":37,"line_end":37,"column_start":1,"column_end":82}},{"value":"repr(i32)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1103,"byte_end":1115,"line_start":38,"line_end":38,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1971,"byte_end":1974,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"new","qualname":"<MZFlush>::new","value":"pub fn new(i32) -> Result<Self, MZError>","parent":null,"children":[],"decl_id":null,"docs":" Create an MZFlush value from an integer value.","sig":null,"attributes":[{"value":"/ Create an MZFlush value from an integer value.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1849,"byte_end":1899,"line_start":61,"line_end":61,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1904,"byte_end":1907,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Returns `MZError::Param` on invalid values.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1912,"byte_end":1959,"line_start":63,"line_end":63,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":990},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2376,"byte_end":2378,"line_start":79,"line_end":79,"column_start":5,"column_end":7},"name":"Ok","qualname":"::MZStatus::Ok","value":"MZStatus::Ok","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":993},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2388,"byte_end":2397,"line_start":80,"line_end":80,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::MZStatus::StreamEnd","value":"MZStatus::StreamEnd","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":996},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2407,"byte_end":2415,"line_start":81,"line_end":81,"column_start":5,"column_end":13},"name":"NeedDict","qualname":"::MZStatus::NeedDict","value":"MZStatus::NeedDict","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":989},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2361,"byte_end":2369,"line_start":78,"line_end":78,"column_start":10,"column_end":18},"name":"MZStatus","qualname":"::MZStatus","value":"pub enum MZStatus { Ok = , StreamEnd = , NeedDict = , }","parent":null,"children":[{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":996}],"decl_id":null,"docs":" A list of miniz successful status codes.\n","sig":null,"attributes":[{"value":"/ A list of miniz successful status codes.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2243,"byte_end":2287,"line_start":75,"line_end":75,"column_start":1,"column_end":45}},{"value":"repr(i32)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2288,"byte_end":2300,"line_start":76,"line_end":76,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1014},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2552,"byte_end":2557,"line_start":88,"line_end":88,"column_start":5,"column_end":10},"name":"ErrNo","qualname":"::MZError::ErrNo","value":"MZError::ErrNo","parent":{"krate":0,"index":1013},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1017},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2568,"byte_end":2574,"line_start":89,"line_end":89,"column_start":5,"column_end":11},"name":"Stream","qualname":"::MZError::Stream","value":"MZError::Stream","parent":{"krate":0,"index":1013},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1020},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2585,"byte_end":2589,"line_start":90,"line_end":90,"column_start":5,"column_end":9},"name":"Data","qualname":"::MZError::Data","value":"MZError::Data","parent":{"krate":0,"index":1013},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1023},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2600,"byte_end":2603,"line_start":91,"line_end":91,"column_start":5,"column_end":8},"name":"Mem","qualname":"::MZError::Mem","value":"MZError::Mem","parent":{"krate":0,"index":1013},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1026},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2614,"byte_end":2617,"line_start":92,"line_end":92,"column_start":5,"column_end":8},"name":"Buf","qualname":"::MZError::Buf","value":"MZError::Buf","parent":{"krate":0,"index":1013},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1029},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2628,"byte_end":2635,"line_start":93,"line_end":93,"column_start":5,"column_end":12},"name":"Version","qualname":"::MZError::Version","value":"MZError::Version","parent":{"krate":0,"index":1013},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1032},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2646,"byte_end":2651,"line_start":94,"line_end":94,"column_start":5,"column_end":10},"name":"Param","qualname":"::MZError::Param","value":"MZError::Param","parent":{"krate":0,"index":1013},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1013},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2538,"byte_end":2545,"line_start":87,"line_end":87,"column_start":10,"column_end":17},"name":"MZError","qualname":"::MZError","value":"pub enum MZError {\n    ErrNo = ,\n    Stream = ,\n    Data = ,\n    Mem = ,\n    Buf = ,\n    Version = ,\n    Param = ,\n}","parent":null,"children":[{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032}],"decl_id":null,"docs":" A list of miniz failed status codes.\n","sig":null,"attributes":[{"value":"/ A list of miniz failed status codes.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2424,"byte_end":2464,"line_start":84,"line_end":84,"column_start":1,"column_end":41}},{"value":"repr(i32)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2465,"byte_end":2477,"line_start":85,"line_end":85,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1050},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2855,"byte_end":2859,"line_start":101,"line_end":101,"column_start":5,"column_end":9},"name":"Zlib","qualname":"::DataFormat::Zlib","value":"DataFormat::Zlib","parent":{"krate":0,"index":1049},"children":[],"decl_id":null,"docs":" Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.\n","sig":null,"attributes":[{"value":"/ Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2779,"byte_end":2850,"line_start":100,"line_end":100,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1052},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2886,"byte_end":2889,"line_start":103,"line_end":103,"column_start":5,"column_end":8},"name":"Raw","qualname":"::DataFormat::Raw","value":"DataFormat::Raw","parent":{"krate":0,"index":1049},"children":[],"decl_id":null,"docs":" Raw DEFLATE.\n","sig":null,"attributes":[{"value":"/ Raw DEFLATE.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2865,"byte_end":2881,"line_start":102,"line_end":102,"column_start":5,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":1049},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2762,"byte_end":2772,"line_start":99,"line_end":99,"column_start":10,"column_end":20},"name":"DataFormat","qualname":"::DataFormat","value":"pub enum DataFormat { Zlib, Raw, }","parent":null,"children":[{"krate":0,"index":1050},{"krate":0,"index":1052}],"decl_id":null,"docs":" How compressed data is wrapped.\n","sig":null,"attributes":[{"value":"/ How compressed data is wrapped.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2666,"byte_end":2701,"line_start":97,"line_end":97,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":658},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":3400,"byte_end":3408,"line_start":124,"line_end":124,"column_start":10,"column_end":18},"name":"MZResult","qualname":"::MZResult","value":"Result<MZStatus, MZError>","parent":null,"children":[],"decl_id":null,"docs":" `Result` alias for all miniz status codes both successful and failed.\n","sig":null,"attributes":[{"value":"/ `Result` alias for all miniz status codes both successful and failed.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":3317,"byte_end":3390,"line_start":123,"line_end":123,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1068},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":3594,"byte_end":3606,"line_start":128,"line_end":128,"column_start":12,"column_end":24},"name":"StreamResult","qualname":"::StreamResult","value":"StreamResult { bytes_consumed, bytes_written, status }","parent":null,"children":[{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071}],"decl_id":null,"docs":" A structure containg the result of a call to the inflate or deflate streaming functions.\n","sig":null,"attributes":[{"value":"/ A structure containg the result of a call to the inflate or deflate streaming functions.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":3439,"byte_end":3531,"line_start":126,"line_end":126,"column_start":1,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":1069},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":3676,"byte_end":3690,"line_start":130,"line_end":130,"column_start":9,"column_end":23},"name":"bytes_consumed","qualname":"::StreamResult::bytes_consumed","value":"usize","parent":{"krate":0,"index":1068},"children":[],"decl_id":null,"docs":" The number of bytes consumed from the input slice.\n","sig":null,"attributes":[{"value":"/ The number of bytes consumed from the input slice.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":3613,"byte_end":3667,"line_start":129,"line_end":129,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1070},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":3764,"byte_end":3777,"line_start":132,"line_end":132,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::StreamResult::bytes_written","value":"usize","parent":{"krate":0,"index":1068},"children":[],"decl_id":null,"docs":" The number of bytes written to the output slice.\n","sig":null,"attributes":[{"value":"/ The number of bytes written to the output slice.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":3703,"byte_end":3755,"line_start":131,"line_end":131,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":1071},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":3833,"byte_end":3839,"line_start":134,"line_end":134,"column_start":9,"column_end":15},"name":"status","qualname":"::StreamResult::status","value":"std::result::Result<MZStatus, MZError>","parent":{"krate":0,"index":1068},"children":[],"decl_id":null,"docs":" The return status of the call.\n","sig":null,"attributes":[{"value":"/ The return status of the call.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":3790,"byte_end":3824,"line_start":133,"line_end":133,"column_start":5,"column_end":39}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/buffer.rs","byte_start":12404,"byte_end":12415,"line_start":30,"line_end":30,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/buffer.rs","byte_start":12528,"byte_end":12539,"line_start":37,"line_end":37,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/buffer.rs","byte_start":12806,"byte_end":12814,"line_start":51,"line_end":51,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":24002,"byte_end":24012,"line_start":219,"line_end":219,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":24354,"byte_end":24364,"line_start":231,"line_end":231,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":29340,"byte_end":29355,"line_start":396,"line_end":396,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":32819,"byte_end":32834,"line_start":492,"line_end":492,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":33471,"byte_end":33483,"line_start":513,"line_end":513,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":34156,"byte_end":34167,"line_start":537,"line_end":537,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":35069,"byte_end":35080,"line_start":569,"line_end":569,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":36049,"byte_end":36062,"line_start":605,"line_end":605,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":37602,"byte_end":37619,"line_start":659,"line_end":659,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":38903,"byte_end":38912,"line_start":709,"line_end":709,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":40672,"byte_end":40675,"line_start":760,"line_end":760,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":42364,"byte_end":42376,"line_start":807,"line_end":807,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":42641,"byte_end":42653,"line_start":817,"line_end":817,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":54971,"byte_end":54980,"line_start":1176,"line_end":1176,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":62187,"byte_end":62198,"line_start":1371,"line_end":1371,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":63911,"byte_end":63918,"line_start":1430,"line_end":1430,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":108029,"byte_end":108041,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":112890,"byte_end":112907,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":113588,"byte_end":113605,"line_start":187,"line_end":187,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":115317,"byte_end":115322,"line_start":259,"line_end":259,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/output_buffer.rs","byte_start":180519,"byte_end":180531,"line_start":11,"line_end":11,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":182981,"byte_end":182993,"line_start":37,"line_end":37,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183372,"byte_end":183384,"line_start":51,"line_end":51,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":104473,"byte_end":104484,"line_start":41,"line_end":41,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1835,"byte_end":1842,"line_start":60,"line_end":60,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2899,"byte_end":2909,"line_start":106,"line_end":106,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":3859,"byte_end":3871,"line_start":137,"line_end":137,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":4123,"byte_end":4131,"line_start":148,"line_end":148,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":4246,"byte_end":4254,"line_start":154,"line_end":154,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":825,"byte_end":832,"line_start":28,"line_end":28,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4404,"byte_end":4408,"line_start":4,"line_end":4,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":40}},{"kind":"Mod","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/mod.rs","byte_start":4418,"byte_end":4424,"line_start":5,"line_end":5,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":358}},{"kind":"Mod","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":842,"byte_end":849,"line_start":29,"line_end":29,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":397}},{"kind":"Mod","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103056,"byte_end":103060,"line_start":6,"line_end":6,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":404}},{"kind":"Mod","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":103089,"byte_end":103095,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":550}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/buffer.rs","byte_start":12404,"byte_end":12415,"line_start":30,"line_end":30,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/buffer.rs","byte_start":12528,"byte_end":12539,"line_start":37,"line_end":37,"column_start":18,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":20},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/buffer.rs","byte_start":12806,"byte_end":12814,"line_start":51,"line_end":51,"column_start":18,"column_end":26},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":34},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":24002,"byte_end":24012,"line_start":219,"line_end":219,"column_start":24,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":715},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":24354,"byte_end":24364,"line_start":231,"line_end":231,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":715},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":29340,"byte_end":29355,"line_start":396,"line_end":396,"column_start":6,"column_end":21},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":32819,"byte_end":32834,"line_start":492,"line_end":492,"column_start":18,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":159},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":33471,"byte_end":33483,"line_start":513,"line_end":513,"column_start":10,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":34156,"byte_end":34167,"line_start":537,"line_end":537,"column_start":10,"column_end":21},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":35069,"byte_end":35080,"line_start":569,"line_end":569,"column_start":10,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":36049,"byte_end":36062,"line_start":605,"line_end":605,"column_start":10,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":200},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":37602,"byte_end":37619,"line_start":659,"line_end":659,"column_start":10,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":212},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":38903,"byte_end":38912,"line_start":709,"line_end":709,"column_start":6,"column_end":15},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":229},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":40672,"byte_end":40675,"line_start":760,"line_end":760,"column_start":6,"column_end":9},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":42364,"byte_end":42376,"line_start":807,"line_end":807,"column_start":18,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":235},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":42641,"byte_end":42653,"line_start":817,"line_end":817,"column_start":6,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":54971,"byte_end":54980,"line_start":1176,"line_end":1176,"column_start":6,"column_end":15},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":62187,"byte_end":62198,"line_start":1371,"line_end":1371,"column_start":6,"column_end":17},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/deflate/core.rs","byte_start":63911,"byte_end":63918,"line_start":1430,"line_end":1430,"column_start":6,"column_end":13},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":108029,"byte_end":108041,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":427},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":112890,"byte_end":112907,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":461},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":113588,"byte_end":113605,"line_start":187,"line_end":187,"column_start":18,"column_end":35},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":461},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/core.rs","byte_start":115317,"byte_end":115322,"line_start":259,"line_end":259,"column_start":6,"column_end":11},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":802},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/output_buffer.rs","byte_start":180519,"byte_end":180531,"line_start":11,"line_end":11,"column_start":10,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":182981,"byte_end":182993,"line_start":37,"line_end":37,"column_start":18,"column_end":30},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":596},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/stream.rs","byte_start":183372,"byte_end":183384,"line_start":51,"line_end":51,"column_start":6,"column_end":18},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":596},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/inflate/mod.rs","byte_start":104473,"byte_end":104484,"line_start":41,"line_end":41,"column_start":6,"column_end":17},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":1835,"byte_end":1842,"line_start":60,"line_end":60,"column_start":6,"column_end":13},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":2899,"byte_end":2909,"line_start":106,"line_end":106,"column_start":6,"column_end":16},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1049},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":3859,"byte_end":3871,"line_start":137,"line_end":137,"column_start":6,"column_end":18},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":4123,"byte_end":4131,"line_start":148,"line_end":148,"column_start":43,"column_end":51},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":658},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.3.7/src/lib.rs","byte_start":4246,"byte_end":4254,"line_start":154,"line_end":154,"column_start":44,"column_end":52},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":658},"to":{"krate":2,"index":2925}}]}