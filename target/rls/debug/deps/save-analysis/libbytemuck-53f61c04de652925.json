{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1","program":"/usr/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=53f61c04de652925","-C","extra-filename=-53f61c04de652925","--out-dir","/home/louie/Programs/maquinitas/target/rls/debug/deps","-L","dependency=/home/louie/Programs/maquinitas/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/usr"],"output":"/home/louie/Programs/maquinitas/target/rls/debug/deps/libbytemuck-53f61c04de652925.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[7079224546225058858,0]},"crate_root":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src","external_crates":[{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[8607811298988957190,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9950803289178341956,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13474909584011716809,0]}}],"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":0,"byte_end":10834,"line_start":1,"line_end":352,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":2137,"byte_end":2141,"line_start":56,"line_end":56,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":2846,"byte_end":2847,"line_start":84,"line_end":84,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"AnyBitPattern","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":44},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":2884,"byte_end":2901,"line_start":87,"line_end":87,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":2951,"byte_end":2952,"line_start":92,"line_end":92,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":2977,"byte_end":2978,"line_start":95,"line_end":95,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3015,"byte_end":3016,"line_start":98,"line_end":98,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"NoUninit","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3055,"byte_end":3056,"line_start":101,"line_end":101,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3093,"byte_end":3094,"line_start":104,"line_end":104,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3135,"byte_end":3136,"line_start":107,"line_end":107,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":0,"byte_end":10834,"line_start":1,"line_end":352,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":163},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":343},{"krate":0,"index":747},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":767},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":368},{"krate":0,"index":371},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":395}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":107,"byte_end":181,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":182,"byte_end":185,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":186,"byte_end":199,"line_start":7,"line_end":7,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":200,"byte_end":203,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":204,"byte_end":277,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":278,"byte_end":292,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":293,"byte_end":296,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":297,"byte_end":320,"line_start":12,"line_end":12,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":321,"byte_end":349,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":350,"byte_end":382,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":383,"byte_end":415,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":416,"byte_end":456,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":457,"byte_end":460,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":461,"byte_end":536,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":537,"byte_end":616,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":617,"byte_end":697,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":698,"byte_end":777,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":778,"byte_end":796,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":797,"byte_end":800,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":801,"byte_end":828,"line_start":24,"line_end":24,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":829,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":833,"byte_end":904,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":905,"byte_end":945,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":946,"byte_end":949,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":950,"byte_end":1025,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":1026,"byte_end":1103,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":1104,"byte_end":1181,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":1182,"byte_end":1227,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":1228,"byte_end":1231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":1232,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":1248,"byte_end":1251,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":1252,"byte_end":1332,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":1333,"byte_end":1412,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":1413,"byte_end":1492,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":1493,"byte_end":1563,"line_start":39,"line_end":39,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":13249,"byte_end":13262,"line_start":41,"line_end":41,"column_start":18,"column_end":31},"name":"AnyBitPattern","qualname":"::anybitpattern::AnyBitPattern","value":"AnyBitPattern: Zeroable + Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types that are valid for any bit pattern.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types that are valid for any bit pattern.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11217,"byte_end":11296,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11297,"byte_end":11300,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11301,"byte_end":11358,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ except that it doesn't require that the type contains no uninit (or padding) bytes.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11359,"byte_end":11446,"line_start":6,"line_end":6,"column_start":1,"column_end":88}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11447,"byte_end":11526,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ included types to `repr(C)` `struct`s that contain padding as well as `union`s. Notably, you can only cast","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11527,"byte_end":11637,"line_start":8,"line_end":8,"column_start":1,"column_end":111}},{"value":"/ *immutable* references and *owned* values into [`AnyBitPattern`] types, not","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11638,"byte_end":11717,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ *mutable* references.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11718,"byte_end":11743,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11744,"byte_end":11747,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`AnyBitPattern`], meaning that any `T: Pod` is also","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11748,"byte_end":11827,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`AnyBitPattern`] but any `T: AnyBitPattern` is not necessarily [`Pod`].","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11828,"byte_end":11904,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11905,"byte_end":11908,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`Zeroable`], meaning that any `T: AnyBitPattern`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11909,"byte_end":11995,"line_start":15,"line_end":15,"column_start":1,"column_end":87}},{"value":"/ is also [`Zeroable`], but any `T: Zeroable` is not necessarily [`AnyBitPattern  ]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":11996,"byte_end":12081,"line_start":16,"line_end":16,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12082,"byte_end":12085,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12086,"byte_end":12098,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12099,"byte_end":12102,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(AnyBitPattern)]` macro is provided under the `derive` feature flag which will","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12103,"byte_end":12196,"line_start":20,"line_end":20,"column_start":1,"column_end":94}},{"value":"/ automatically validate the requirements of this trait and implement the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12197,"byte_end":12272,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ trait for you for both structs and enums. This is the recommended method for","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12273,"byte_end":12353,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ implementing the trait, however it's also possible to do manually. If you","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12354,"byte_end":12431,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ implement it manually, you *must* carefully follow the below safety rules.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12432,"byte_end":12510,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12511,"byte_end":12514,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ * *NOTE: even `C-style`, fieldless enums are intentionally **excluded** from","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12515,"byte_end":12595,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ this trait, since it is **unsound** for an enum to have a discriminant value","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12596,"byte_end":12676,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ that is not one of its defined variants.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12677,"byte_end":12721,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ ","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12722,"byte_end":12726,"line_start":29,"line_end":29,"column_start":1,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12727,"byte_end":12739,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12740,"byte_end":12743,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Similar to [`Pod`] except we disregard the rule about it must not contain uninit bytes.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12744,"byte_end":12835,"line_start":32,"line_end":32,"column_start":1,"column_end":92}},{"value":"/ Still, this is a quite strong guarantee about a type, so *be careful* when","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12836,"byte_end":12914,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ implementing it manually.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12915,"byte_end":12944,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12945,"byte_end":12948,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12949,"byte_end":12989,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":12990,"byte_end":13037,"line_start":37,"line_end":37,"column_start":1,"column_end":48}},{"value":"/ * The type must be valid for any bit pattern of its backing memory.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":13038,"byte_end":13109,"line_start":38,"line_end":38,"column_start":1,"column_end":72}},{"value":"/ * Structs need to have all fields also be `AnyBitPattern`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":13110,"byte_end":13172,"line_start":39,"line_end":39,"column_start":1,"column_end":63}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":13173,"byte_end":13231,"line_start":40,"line_end":40,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":29},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::checked","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":398},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":102}],"decl_id":null,"docs":" Checked versions of the casting functions exposed in crate root\n that support [`CheckedBitPattern`] types.\n","sig":null,"attributes":[{"value":"/ Checked versions of the casting functions exposed in crate root","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":13389,"byte_end":13456,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/ that support [`CheckedBitPattern`] types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":13457,"byte_end":13502,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18201,"byte_end":18218,"line_start":121,"line_end":121,"column_start":18,"column_end":35},"name":"CheckedBitPattern","qualname":"::checked::CheckedBitPattern","value":"CheckedBitPattern: Copy","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" A marker trait that allows types that have some invalid bit patterns to be used\n in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by performing\n a runtime check on a perticular set of bits. This is particularly\n useful for types like fieldless ('C-style') enums, [`char`], bool, and structs containing them.","sig":null,"attributes":[{"value":"/ A marker trait that allows types that have some invalid bit patterns to be used","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":13583,"byte_end":13666,"line_start":6,"line_end":6,"column_start":1,"column_end":84}},{"value":"/ in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by performing","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":13667,"byte_end":13752,"line_start":7,"line_end":7,"column_start":1,"column_end":86}},{"value":"/ a runtime check on a perticular set of bits. This is particularly","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":13753,"byte_end":13822,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ useful for types like fieldless ('C-style') enums, [`char`], bool, and structs containing them.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":13823,"byte_end":13922,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":13923,"byte_end":13926,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ To do this, we define a `Bits` type which is a type with equivalent layout","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":13927,"byte_end":14005,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ to `Self` other than the invalid bit patterns which disallow `Self` from","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14006,"byte_end":14082,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ being [`AnyBitPattern`]. This `Bits` type must itself implement [`AnyBitPattern`].","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14083,"byte_end":14169,"line_start":13,"line_end":13,"column_start":1,"column_end":87}},{"value":"/ Then, we implement a function that checks wheter a certain instance","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14170,"byte_end":14241,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ of the `Bits` is also a valid bit pattern of `Self`. If this check passes, then we","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14242,"byte_end":14328,"line_start":15,"line_end":15,"column_start":1,"column_end":87}},{"value":"/ can allow casting from the `Bits` to `Self` (and therefore, any type which","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14329,"byte_end":14407,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ is able to be cast to `Bits` is also able to be cast to `Self`).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14408,"byte_end":14476,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14477,"byte_end":14480,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`CheckedBitPattern`], meaning that any `T: AnyBitPattern` is also","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14481,"byte_end":14584,"line_start":19,"line_end":19,"column_start":1,"column_end":104}},{"value":"/ [`CheckedBitPattern`]. This means you can also use any [`AnyBitPattern`] type in the checked versions","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14585,"byte_end":14690,"line_start":20,"line_end":20,"column_start":1,"column_end":106}},{"value":"/ of casting functions in this module. If it's possible, prefer implementing [`AnyBitPattern`] for your","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14691,"byte_end":14796,"line_start":21,"line_end":21,"column_start":1,"column_end":106}},{"value":"/ type directly instead of [`CheckedBitPattern`] as it gives greater flexibility.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14797,"byte_end":14880,"line_start":22,"line_end":22,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14881,"byte_end":14884,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14885,"byte_end":14897,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14898,"byte_end":14901,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(CheckedBitPattern)]` macro is provided under the `derive` feature flag which will","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":14902,"byte_end":14999,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/ automatically validate the requirements of this trait and implement the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15000,"byte_end":15075,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ trait for you for both enums and structs. This is the recommended method for","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15076,"byte_end":15156,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ implementing the trait, however it's also possible to do manually.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15157,"byte_end":15227,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15228,"byte_end":15231,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15232,"byte_end":15245,"line_start":31,"line_end":31,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15246,"byte_end":15249,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ If manually implementing the trait, we can do something like so:","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15250,"byte_end":15318,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15319,"byte_end":15322,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15323,"byte_end":15334,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15335,"byte_end":15383,"line_start":36,"line_end":36,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15384,"byte_end":15387,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ #[repr(u32)]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15388,"byte_end":15404,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/ #[derive(Copy, Clone)]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15405,"byte_end":15431,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/ enum MyEnum {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15432,"byte_end":15449,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/     Variant0 = 0,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15450,"byte_end":15471,"line_start":41,"line_end":41,"column_start":1,"column_end":22}},{"value":"/     Variant1 = 1,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15472,"byte_end":15493,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"/     Variant2 = 2,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15494,"byte_end":15515,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15516,"byte_end":15521,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15522,"byte_end":15525,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15526,"byte_end":15572,"line_start":46,"line_end":46,"column_start":1,"column_end":47}},{"value":"/     type Bits = u32;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15573,"byte_end":15597,"line_start":47,"line_end":47,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15598,"byte_end":15601,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15602,"byte_end":15655,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/         match *bits {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15656,"byte_end":15681,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/             0 | 1 | 2 => true,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15682,"byte_end":15716,"line_start":51,"line_end":51,"column_start":1,"column_end":35}},{"value":"/             _ => false,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15717,"byte_end":15744,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15745,"byte_end":15758,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15759,"byte_end":15768,"line_start":54,"line_end":54,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15769,"byte_end":15774,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/ ","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15775,"byte_end":15779,"line_start":56,"line_end":56,"column_start":1,"column_end":5}},{"value":"/ // It is often useful to also implement `NoUninit` on our `CheckedBitPattern` types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15780,"byte_end":15868,"line_start":57,"line_end":57,"column_start":1,"column_end":89}},{"value":"/ // This will allow us to do casting of mutable references (and mutable slices).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15869,"byte_end":15952,"line_start":58,"line_end":58,"column_start":1,"column_end":84}},{"value":"/ // It is not always possible to do so, but in this case we have no padding so it is.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":15953,"byte_end":16041,"line_start":59,"line_end":59,"column_start":1,"column_end":89}},{"value":"/ unsafe impl NoUninit for MyEnum {}","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16042,"byte_end":16080,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16081,"byte_end":16088,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16089,"byte_end":16092,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ We can now use relevant casting functions. For example,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16093,"byte_end":16152,"line_start":63,"line_end":63,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16153,"byte_end":16156,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16157,"byte_end":16168,"line_start":65,"line_end":65,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16169,"byte_end":16219,"line_start":66,"line_end":66,"column_start":1,"column_end":51}},{"value":"/ # #[repr(u32)]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16220,"byte_end":16238,"line_start":67,"line_end":67,"column_start":1,"column_end":19}},{"value":"/ # #[derive(Copy, Clone, PartialEq, Eq, Debug)]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16239,"byte_end":16289,"line_start":68,"line_end":68,"column_start":1,"column_end":51}},{"value":"/ # enum MyEnum {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16290,"byte_end":16309,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/ #     Variant0 = 0,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16310,"byte_end":16333,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/ #     Variant1 = 1,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16334,"byte_end":16357,"line_start":71,"line_end":71,"column_start":1,"column_end":24}},{"value":"/ #     Variant2 = 2,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16358,"byte_end":16381,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/ # }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16382,"byte_end":16389,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ # unsafe impl NoUninit for MyEnum {}","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16390,"byte_end":16430,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"/ # unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16431,"byte_end":16479,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/ #     type Bits = u32;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16480,"byte_end":16506,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/ #     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16507,"byte_end":16562,"line_start":77,"line_end":77,"column_start":1,"column_end":56}},{"value":"/ #         match *bits {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16563,"byte_end":16590,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/ #             0 | 1 | 2 => true,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16591,"byte_end":16627,"line_start":79,"line_end":79,"column_start":1,"column_end":37}},{"value":"/ #             _ => false,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16628,"byte_end":16657,"line_start":80,"line_end":80,"column_start":1,"column_end":30}},{"value":"/ #         }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16658,"byte_end":16673,"line_start":81,"line_end":81,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16674,"byte_end":16685,"line_start":82,"line_end":82,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16686,"byte_end":16693,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::{bytes_of, bytes_of_mut};","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16694,"byte_end":16737,"line_start":84,"line_end":84,"column_start":1,"column_end":44}},{"value":"/ use bytemuck::checked;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16738,"byte_end":16764,"line_start":85,"line_end":85,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16765,"byte_end":16768,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let bytes = bytes_of(&2u32);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16769,"byte_end":16801,"line_start":87,"line_end":87,"column_start":1,"column_end":33}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16802,"byte_end":16860,"line_start":88,"line_end":88,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(result, Ok(&MyEnum::Variant2));","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16861,"byte_end":16907,"line_start":89,"line_end":89,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16908,"byte_end":16911,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ // Fails for invalid discriminant","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16912,"byte_end":16949,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"/ let bytes = bytes_of(&100u32);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16950,"byte_end":16984,"line_start":92,"line_end":92,"column_start":1,"column_end":35}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":16985,"byte_end":17043,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"/ assert!(result.is_err());","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17044,"byte_end":17073,"line_start":94,"line_end":94,"column_start":1,"column_end":30}},{"value":"/ ","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17074,"byte_end":17078,"line_start":95,"line_end":95,"column_start":1,"column_end":5}},{"value":"/ // Since we implemented NoUninit, we can also cast mutably from an original type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17079,"byte_end":17163,"line_start":96,"line_end":96,"column_start":1,"column_end":85}},{"value":"/ // that is `NoUninit + AnyBitPattern`:","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17164,"byte_end":17206,"line_start":97,"line_end":97,"column_start":1,"column_end":43}},{"value":"/ let mut my_u32 = 2u32;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17207,"byte_end":17233,"line_start":98,"line_end":98,"column_start":1,"column_end":27}},{"value":"/ {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17234,"byte_end":17239,"line_start":99,"line_end":99,"column_start":1,"column_end":6}},{"value":"/   let as_enum_mut = checked::cast_mut::<_, MyEnum>(&mut my_u32);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17240,"byte_end":17308,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/   assert_eq!(as_enum_mut, &mut MyEnum::Variant2);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17309,"byte_end":17362,"line_start":101,"line_end":101,"column_start":1,"column_end":54}},{"value":"/   *as_enum_mut = MyEnum::Variant0;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17363,"byte_end":17401,"line_start":102,"line_end":102,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17402,"byte_end":17407,"line_start":103,"line_end":103,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(my_u32, 0u32);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17408,"byte_end":17437,"line_start":104,"line_end":104,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17438,"byte_end":17445,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17446,"byte_end":17449,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17450,"byte_end":17462,"line_start":107,"line_end":107,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17463,"byte_end":17466,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ * `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17467,"byte_end":17542,"line_start":109,"line_end":109,"column_start":1,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during [`is_valid_bit_pattern`].","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17543,"byte_end":17627,"line_start":110,"line_end":110,"column_start":1,"column_end":85}},{"value":"/   * This almost certainly means your type must be `#[repr(C)]` or a similar","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17628,"byte_end":17707,"line_start":111,"line_end":111,"column_start":1,"column_end":80}},{"value":"/   specified repr, but if you think you know better, you probably don't. If you","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17708,"byte_end":17790,"line_start":112,"line_end":112,"column_start":1,"column_end":83}},{"value":"/   still think you know better, be careful and have fun. And don't mess it up","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17791,"byte_end":17871,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   (I mean it).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17872,"byte_end":17890,"line_start":114,"line_end":114,"column_start":1,"column_end":19}},{"value":"/ * If [`is_valid_bit_pattern`] returns true, then the bit pattern contained in","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17891,"byte_end":17972,"line_start":115,"line_end":115,"column_start":1,"column_end":82}},{"value":"/   `bits` must also be valid for an instance of `Self`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":17973,"byte_end":18031,"line_start":116,"line_end":116,"column_start":1,"column_end":59}},{"value":"/ * Probably more, don't mess it up (I mean it 2.0)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18032,"byte_end":18085,"line_start":117,"line_end":117,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18086,"byte_end":18089,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18090,"byte_end":18159,"line_start":119,"line_end":119,"column_start":1,"column_end":70}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18160,"byte_end":18183,"line_start":120,"line_end":120,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":45},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18475,"byte_end":18479,"line_start":126,"line_end":126,"column_start":8,"column_end":12},"name":"Bits","qualname":"::checked::CheckedBitPattern::Bits","value":"type Bits: AnyBitPattern;","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" `Self` *must* have the same layout as the specified `Bits` except for\n the possible invalid bit patterns being checked during [`is_valid_bit_pattern`].","sig":null,"attributes":[{"value":"/ `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18229,"byte_end":18302,"line_start":122,"line_end":122,"column_start":3,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during [`is_valid_bit_pattern`].","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18305,"byte_end":18389,"line_start":123,"line_end":123,"column_start":3,"column_end":87}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18392,"byte_end":18395,"line_start":124,"line_end":124,"column_start":3,"column_end":6}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18398,"byte_end":18467,"line_start":125,"line_end":125,"column_start":3,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18595,"byte_end":18615,"line_start":129,"line_end":129,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"::checked::CheckedBitPattern::is_valid_bit_pattern","value":"pub fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" If this function returns true, then it must be valid to reinterpret `bits` as `&Self`.\n","sig":null,"attributes":[{"value":"/ If this function returns true, then it must be valid to reinterpret `bits` as `&Self`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18499,"byte_end":18589,"line_start":128,"line_end":128,"column_start":3,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":399},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":19398,"byte_end":19410,"line_start":166,"line_end":166,"column_start":3,"column_end":15},"name":"PodCastError","qualname":"::checked::CheckedCastError::PodCastError","value":"CheckedCastError::PodCastError(crate::PodCastError)","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" An error occurred during a true-[`Pod`] cast\n","sig":null,"attributes":[{"value":"/ An error occurred during a true-[`Pod`] cast","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":19347,"byte_end":19395,"line_start":165,"line_end":165,"column_start":3,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":402},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":19685,"byte_end":19702,"line_start":171,"line_end":171,"column_start":3,"column_end":20},"name":"InvalidBitPattern","qualname":"::checked::CheckedCastError::InvalidBitPattern","value":"CheckedCastError::InvalidBitPattern","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" When casting to a [`CheckedBitPattern`] type, it is possible that the original\n data contains an invalid bit pattern. If so, the cast will fail and\n this error will be returned. Will never happen on casts between\n [`Pod`] types.\n","sig":null,"attributes":[{"value":"/ When casting to a [`CheckedBitPattern`] type, it is possible that the original","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":19435,"byte_end":19517,"line_start":167,"line_end":167,"column_start":3,"column_end":85}},{"value":"/ data contains an invalid bit pattern. If so, the cast will fail and","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":19520,"byte_end":19591,"line_start":168,"line_end":168,"column_start":3,"column_end":74}},{"value":"/ this error will be returned. Will never happen on casts between","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":19594,"byte_end":19661,"line_start":169,"line_end":169,"column_start":3,"column_end":70}},{"value":"/ [`Pod`] types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":19664,"byte_end":19682,"line_start":170,"line_end":170,"column_start":3,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":398},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":19326,"byte_end":19342,"line_start":164,"line_end":164,"column_start":10,"column_end":26},"name":"CheckedCastError","qualname":"::checked::CheckedCastError","value":"pub enum CheckedCastError {\n    PodCastError(crate::PodCastError),\n    InvalidBitPattern,\n}","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":402}],"decl_id":null,"docs":" The things that can go wrong when casting between [`CheckedBitPattern`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`CheckedBitPattern`] data forms.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":19178,"byte_end":19265,"line_start":162,"line_end":162,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20389,"byte_end":20403,"line_start":197,"line_end":197,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::checked::try_from_bytes","value":"pub fn try_from_bytes<T: CheckedBitPattern>(&[u8])\n-> Result<&T, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20136,"byte_end":20170,"line_start":189,"line_end":189,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20171,"byte_end":20174,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20175,"byte_end":20189,"line_start":191,"line_end":191,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20190,"byte_end":20193,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20194,"byte_end":20243,"line_start":193,"line_end":193,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20244,"byte_end":20312,"line_start":194,"line_end":194,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20313,"byte_end":20371,"line_start":195,"line_end":195,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20372,"byte_end":20381,"line_start":196,"line_end":196,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20992,"byte_end":21010,"line_start":217,"line_end":217,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::checked::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: CheckedBitPattern + NoUninit>(&mut [u8])\n-> Result<&mut T, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20731,"byte_end":20773,"line_start":209,"line_end":209,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20774,"byte_end":20777,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20778,"byte_end":20792,"line_start":211,"line_end":211,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20793,"byte_end":20796,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20797,"byte_end":20846,"line_start":213,"line_end":213,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20847,"byte_end":20915,"line_start":214,"line_end":214,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20916,"byte_end":20974,"line_start":215,"line_end":215,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20975,"byte_end":20984,"line_start":216,"line_end":216,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":21566,"byte_end":21588,"line_start":235,"line_end":235,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::checked::try_pod_read_unaligned","value":"pub fn try_pod_read_unaligned<T: CheckedBitPattern>(&[u8])\n-> Result<T, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":21361,"byte_end":21408,"line_start":229,"line_end":229,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":21409,"byte_end":21412,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":21413,"byte_end":21427,"line_start":231,"line_end":231,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":21428,"byte_end":21489,"line_start":232,"line_end":232,"column_start":1,"column_end":62}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":21490,"byte_end":21548,"line_start":233,"line_end":233,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":21549,"byte_end":21558,"line_start":234,"line_end":234,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22333,"byte_end":22341,"line_start":257,"line_end":257,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::checked::try_cast","value":"pub fn try_cast<A: NoUninit, B: CheckedBitPattern>(A)\n-> Result<B, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":21881,"byte_end":21910,"line_start":245,"line_end":245,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":21911,"byte_end":21914,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":21915,"byte_end":21992,"line_start":247,"line_end":247,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":21993,"byte_end":22072,"line_start":248,"line_end":248,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22073,"byte_end":22151,"line_start":249,"line_end":249,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22152,"byte_end":22171,"line_start":250,"line_end":250,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22172,"byte_end":22175,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22176,"byte_end":22190,"line_start":252,"line_end":252,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22191,"byte_end":22194,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22195,"byte_end":22250,"line_start":254,"line_end":254,"column_start":1,"column_end":56}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22251,"byte_end":22315,"line_start":255,"line_end":255,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22316,"byte_end":22325,"line_start":256,"line_end":256,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22885,"byte_end":22897,"line_start":277,"line_end":277,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::checked::try_cast_ref","value":"pub fn try_cast_ref<A: NoUninit, B: CheckedBitPattern>(&A)\n-> Result<&B, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22627,"byte_end":22663,"line_start":269,"line_end":269,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22664,"byte_end":22667,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22668,"byte_end":22682,"line_start":271,"line_end":271,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22683,"byte_end":22686,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22687,"byte_end":22739,"line_start":273,"line_end":273,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22740,"byte_end":22802,"line_start":274,"line_end":274,"column_start":1,"column_end":63}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22803,"byte_end":22867,"line_start":275,"line_end":275,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":22868,"byte_end":22877,"line_start":276,"line_end":276,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23339,"byte_end":23351,"line_start":293,"line_end":293,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::checked::try_cast_mut","value":"pub fn try_cast_mut<A: NoUninit + AnyBitPattern, B: CheckedBitPattern +\n                    NoUninit>(&mut A) -> Result<&mut B, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23233,"byte_end":23277,"line_start":289,"line_end":289,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23278,"byte_end":23281,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_ref`], but `mut`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23282,"byte_end":23321,"line_start":291,"line_end":291,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23322,"byte_end":23331,"line_start":292,"line_end":292,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":24581,"byte_end":24595,"line_start":322,"line_end":322,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::checked::try_cast_slice","value":"pub fn try_cast_slice<A: NoUninit, B: CheckedBitPattern>(&[A])\n-> Result<&[B], CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23722,"byte_end":23795,"line_start":305,"line_end":305,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23796,"byte_end":23799,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23800,"byte_end":23859,"line_start":307,"line_end":307,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23860,"byte_end":23929,"line_start":308,"line_end":308,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23930,"byte_end":23933,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23934,"byte_end":23948,"line_start":310,"line_end":310,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23949,"byte_end":23952,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":23953,"byte_end":24033,"line_start":312,"line_end":312,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":24034,"byte_end":24054,"line_start":313,"line_end":313,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":24055,"byte_end":24132,"line_start":314,"line_end":314,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":24133,"byte_end":24209,"line_start":315,"line_end":315,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":24210,"byte_end":24290,"line_start":316,"line_end":316,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":24291,"byte_end":24315,"line_start":317,"line_end":317,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":24316,"byte_end":24441,"line_start":318,"line_end":318,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":24442,"byte_end":24462,"line_start":319,"line_end":319,"column_start":1,"column_end":21}},{"value":"/ * If any element of the converted slice would contain an invalid bit pattern for `B` this fails.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":24463,"byte_end":24563,"line_start":320,"line_end":320,"column_start":1,"column_end":101}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":24564,"byte_end":24573,"line_start":321,"line_end":321,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25123,"byte_end":25141,"line_start":341,"line_end":341,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::checked::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: NoUninit + AnyBitPattern, B: CheckedBitPattern +\n                          NoUninit>(&mut [A])\n-> Result<&mut [B], CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":24973,"byte_end":25045,"line_start":336,"line_end":336,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25046,"byte_end":25058,"line_start":337,"line_end":337,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25059,"byte_end":25062,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_slice`], but `&mut`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25063,"byte_end":25105,"line_start":339,"line_end":339,"column_start":1,"column_end":43}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25106,"byte_end":25115,"line_start":340,"line_end":340,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25690,"byte_end":25700,"line_start":361,"line_end":361,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::checked::from_bytes","value":"pub fn from_bytes<T: CheckedBitPattern>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25560,"byte_end":25594,"line_start":355,"line_end":355,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25595,"byte_end":25598,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25599,"byte_end":25612,"line_start":357,"line_end":357,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25613,"byte_end":25616,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25617,"byte_end":25672,"line_start":359,"line_end":359,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25673,"byte_end":25682,"line_start":360,"line_end":360,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25987,"byte_end":26001,"line_start":374,"line_end":374,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::checked::from_bytes_mut","value":"pub fn from_bytes_mut<T: NoUninit + CheckedBitPattern>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25845,"byte_end":25887,"line_start":368,"line_end":368,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25888,"byte_end":25891,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25892,"byte_end":25905,"line_start":370,"line_end":370,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25906,"byte_end":25909,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25910,"byte_end":25969,"line_start":372,"line_end":372,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":25970,"byte_end":25979,"line_start":373,"line_end":373,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26317,"byte_end":26335,"line_start":386,"line_end":386,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::checked::pod_read_unaligned","value":"pub fn pod_read_unaligned<T: AnyBitPattern>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26173,"byte_end":26210,"line_start":381,"line_end":381,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26211,"byte_end":26214,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26215,"byte_end":26228,"line_start":383,"line_end":383,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26229,"byte_end":26299,"line_start":384,"line_end":384,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26300,"byte_end":26309,"line_start":385,"line_end":385,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26638,"byte_end":26642,"line_start":399,"line_end":399,"column_start":8,"column_end":12},"name":"cast","qualname":"::checked::cast","value":"pub fn cast<A: NoUninit, B: CheckedBitPattern>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26499,"byte_end":26520,"line_start":393,"line_end":393,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26521,"byte_end":26524,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26525,"byte_end":26538,"line_start":395,"line_end":395,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26539,"byte_end":26542,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26543,"byte_end":26620,"line_start":397,"line_end":397,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26621,"byte_end":26630,"line_start":398,"line_end":398,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":93},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26909,"byte_end":26917,"line_start":412,"line_end":412,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::checked::cast_mut","value":"pub fn cast_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\n                CheckedBitPattern>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26783,"byte_end":26815,"line_start":406,"line_end":406,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26816,"byte_end":26819,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26820,"byte_end":26833,"line_start":408,"line_end":408,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26834,"byte_end":26837,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26838,"byte_end":26891,"line_start":410,"line_end":410,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":26892,"byte_end":26901,"line_start":411,"line_end":411,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27221,"byte_end":27229,"line_start":425,"line_end":425,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::checked::cast_ref","value":"pub fn cast_ref<A: NoUninit, B: CheckedBitPattern>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27103,"byte_end":27127,"line_start":419,"line_end":419,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27128,"byte_end":27131,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27132,"byte_end":27145,"line_start":421,"line_end":421,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27146,"byte_end":27149,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27150,"byte_end":27203,"line_start":423,"line_end":423,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27204,"byte_end":27213,"line_start":424,"line_end":424,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":99},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27504,"byte_end":27514,"line_start":438,"line_end":438,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::checked::cast_slice","value":"pub fn cast_slice<A: NoUninit, B: CheckedBitPattern>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27380,"byte_end":27408,"line_start":432,"line_end":432,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27409,"byte_end":27412,"line_start":433,"line_end":433,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27413,"byte_end":27426,"line_start":434,"line_end":434,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27427,"byte_end":27430,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27431,"byte_end":27486,"line_start":436,"line_end":436,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27487,"byte_end":27496,"line_start":437,"line_end":437,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":102},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27809,"byte_end":27823,"line_start":451,"line_end":451,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::checked::cast_slice_mut","value":"pub fn cast_slice_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\n                      CheckedBitPattern>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27673,"byte_end":27709,"line_start":445,"line_end":445,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27710,"byte_end":27713,"line_start":446,"line_end":446,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27714,"byte_end":27727,"line_start":447,"line_end":447,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27728,"byte_end":27731,"line_start":448,"line_end":448,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27732,"byte_end":27791,"line_start":449,"line_end":449,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":27792,"byte_end":27801,"line_start":450,"line_end":450,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":165},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41000,"byte_end":41008,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":166}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":40542,"byte_end":40593,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":40594,"byte_end":40628,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":40629,"byte_end":40632,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":40633,"byte_end":40696,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":40697,"byte_end":40753,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":40754,"byte_end":40757,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":40758,"byte_end":40771,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":40772,"byte_end":40775,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":40776,"byte_end":40817,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":40818,"byte_end":40865,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":40866,"byte_end":40939,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":40940,"byte_end":40982,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41288,"byte_end":41294,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"pub fn zeroed() -> Self","parent":{"krate":0,"index":165},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41020,"byte_end":41060,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41063,"byte_end":41066,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41069,"byte_end":41144,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41147,"byte_end":41225,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41228,"byte_end":41270,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41273,"byte_end":41282,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":262},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58742,"byte_end":58745,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57434,"byte_end":57472,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57473,"byte_end":57476,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57477,"byte_end":57554,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57555,"byte_end":57634,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57635,"byte_end":57715,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57716,"byte_end":57734,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57735,"byte_end":57738,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57739,"byte_end":57815,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57816,"byte_end":57887,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57888,"byte_end":57962,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57963,"byte_end":57981,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57982,"byte_end":57985,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":57986,"byte_end":57999,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58000,"byte_end":58003,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58004,"byte_end":58044,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58045,"byte_end":58092,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58093,"byte_end":58171,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58172,"byte_end":58200,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the middle or on","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58201,"byte_end":58290,"line_start":21,"line_end":21,"column_start":1,"column_end":90}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58291,"byte_end":58371,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58372,"byte_end":58452,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58453,"byte_end":58468,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58469,"byte_end":58523,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58524,"byte_end":58599,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58600,"byte_end":58679,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58680,"byte_end":58724,"line_start":28,"line_end":28,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":308},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75634,"byte_end":75642,"line_start":46,"line_end":46,"column_start":18,"column_end":26},"name":"NoUninit","qualname":"::no_uninit::NoUninit","value":"NoUninit: Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73148,"byte_end":73226,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73227,"byte_end":73230,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73231,"byte_end":73288,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ except that it doesn't require that all bit patterns of the type are valid, i.e.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73289,"byte_end":73373,"line_start":6,"line_end":6,"column_start":1,"column_end":85}},{"value":"/ it does not require the type to be [`Zeroable`][crate::Zeroable].","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73374,"byte_end":73443,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73444,"byte_end":73523,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ included types to things like C-style enums. Notably, you can only cast from","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73524,"byte_end":73604,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ *immutable* references to a [`NoUninit`] type into *immutable* references of any other","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73605,"byte_end":73695,"line_start":10,"line_end":10,"column_start":1,"column_end":91}},{"value":"/ type, no casting of mutable references or mutable references to slices etc.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73696,"byte_end":73775,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73776,"byte_end":73779,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`NoUninit`], meaning that any `T: Pod` is also","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73780,"byte_end":73854,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ [`NoUninit`] but any `T: NoUninit` is not necessarily [`Pod`]. If possible,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73855,"byte_end":73934,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ prefer implementing [`Pod`] directly. To get more [`Pod`]-like functionality for","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":73935,"byte_end":74019,"line_start":15,"line_end":15,"column_start":1,"column_end":85}},{"value":"/ a type that is only [`NoUninit`], consider also implementing [`CheckedBitPattern`][crate::CheckedBitPattern].","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74020,"byte_end":74133,"line_start":16,"line_end":16,"column_start":1,"column_end":114}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74134,"byte_end":74137,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74138,"byte_end":74150,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74151,"byte_end":74154,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(NoUninit)]` macro is provided under the `derive` feature flag which will","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74155,"byte_end":74243,"line_start":20,"line_end":20,"column_start":1,"column_end":89}},{"value":"/ automatically validate the requirements of this trait and implement the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74244,"byte_end":74319,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ trait for you for both enums and structs. This is the recommended method for","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74320,"byte_end":74400,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ implementing the trait, however it's also possible to do manually. If you","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74401,"byte_end":74478,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ implement it manually, you *must* carefully follow the below safety rules.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74479,"byte_end":74557,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74558,"byte_end":74561,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74562,"byte_end":74574,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74575,"byte_end":74578,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The same as [`Pod`] except we disregard the rule about it must","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74579,"byte_end":74645,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/ allow any bit pattern (i.e. it does not need to be [`Zeroable`][crate::Zeroable]).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74646,"byte_end":74732,"line_start":29,"line_end":29,"column_start":1,"column_end":87}},{"value":"/ Still, this is a quite strong guarantee about a type, so *be careful* whem","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74733,"byte_end":74811,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ implementing it manually.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74812,"byte_end":74841,"line_start":31,"line_end":31,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74842,"byte_end":74845,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74846,"byte_end":74886,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74887,"byte_end":74934,"line_start":34,"line_end":34,"column_start":1,"column_end":48}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the middle or on","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":74935,"byte_end":75024,"line_start":35,"line_end":35,"column_start":1,"column_end":90}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75025,"byte_end":75105,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75106,"byte_end":75186,"line_start":37,"line_end":37,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75187,"byte_end":75202,"line_start":38,"line_end":38,"column_start":1,"column_end":16}},{"value":"/ * Structs need to have all fields also be `NoUninit`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75203,"byte_end":75260,"line_start":39,"line_end":39,"column_start":1,"column_end":58}},{"value":"/ * Structs need to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75261,"byte_end":75334,"line_start":40,"line_end":40,"column_start":1,"column_end":74}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75335,"byte_end":75414,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75415,"byte_end":75459,"line_start":42,"line_end":42,"column_start":1,"column_end":45}},{"value":"/ * Enums need to have an explicit `#[repr(Int)]`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75460,"byte_end":75511,"line_start":43,"line_end":43,"column_start":1,"column_end":52}},{"value":"/ * Enums must have only fieldless variants","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75512,"byte_end":75557,"line_start":44,"line_end":44,"column_start":1,"column_end":46}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75558,"byte_end":75616,"line_start":45,"line_end":45,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":316},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78813,"byte_end":78823,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":75845,"byte_end":75873,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":75874,"byte_end":75877,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":75878,"byte_end":75953,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":75954,"byte_end":76020,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76021,"byte_end":76065,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76066,"byte_end":76069,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76070,"byte_end":76149,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76150,"byte_end":76230,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76231,"byte_end":76293,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76294,"byte_end":76297,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76298,"byte_end":76376,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76377,"byte_end":76452,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76453,"byte_end":76481,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76482,"byte_end":76485,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76486,"byte_end":76499,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76500,"byte_end":76503,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76504,"byte_end":76511,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76512,"byte_end":76543,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76544,"byte_end":76559,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76560,"byte_end":76604,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76605,"byte_end":76619,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76620,"byte_end":76632,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76633,"byte_end":76645,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76646,"byte_end":76658,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76659,"byte_end":76671,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76672,"byte_end":76684,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76685,"byte_end":76690,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76691,"byte_end":76727,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76728,"byte_end":76748,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76749,"byte_end":76790,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76791,"byte_end":76832,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76833,"byte_end":76838,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76839,"byte_end":76893,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76894,"byte_end":76937,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76938,"byte_end":76979,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76980,"byte_end":76987,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":76988,"byte_end":77000,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77001,"byte_end":77004,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77005,"byte_end":77078,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77079,"byte_end":77092,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77093,"byte_end":77096,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77097,"byte_end":77174,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77175,"byte_end":77254,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77255,"byte_end":77309,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77310,"byte_end":77313,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77314,"byte_end":77394,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77395,"byte_end":77417,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77418,"byte_end":77421,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77422,"byte_end":77502,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77503,"byte_end":77559,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77560,"byte_end":77563,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77564,"byte_end":77639,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77640,"byte_end":77712,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77713,"byte_end":77782,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77783,"byte_end":77786,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77787,"byte_end":77865,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77866,"byte_end":77942,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77943,"byte_end":77954,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77955,"byte_end":77958,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":77959,"byte_end":78031,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78032,"byte_end":78110,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78111,"byte_end":78187,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78188,"byte_end":78267,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78268,"byte_end":78271,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78272,"byte_end":78344,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78345,"byte_end":78410,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78411,"byte_end":78414,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78415,"byte_end":78492,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78493,"byte_end":78515,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78516,"byte_end":78519,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78520,"byte_end":78599,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78600,"byte_end":78633,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78634,"byte_end":78637,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78638,"byte_end":78715,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78716,"byte_end":78795,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":317},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79648,"byte_end":79651,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78844,"byte_end":78915,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78918,"byte_end":78927,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78930,"byte_end":78933,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78936,"byte_end":79008,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79011,"byte_end":79077,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79080,"byte_end":79148,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79151,"byte_end":79193,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79196,"byte_end":79199,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79202,"byte_end":79279,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79282,"byte_end":79304,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79307,"byte_end":79310,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79313,"byte_end":79382,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79385,"byte_end":79461,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79464,"byte_end":79533,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79536,"byte_end":79574,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79577,"byte_end":79580,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79583,"byte_end":79640,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":318},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79742,"byte_end":79751,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79668,"byte_end":79733,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":319},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79841,"byte_end":79850,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79767,"byte_end":79832,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80515,"byte_end":80527,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"pub fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79866,"byte_end":79934,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":79937,"byte_end":80000,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80003,"byte_end":80006,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80009,"byte_end":80083,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80086,"byte_end":80153,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80156,"byte_end":80224,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80227,"byte_end":80230,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80233,"byte_end":80245,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80248,"byte_end":80251,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80254,"byte_end":80327,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80330,"byte_end":80376,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80379,"byte_end":80382,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80385,"byte_end":80459,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80462,"byte_end":80497,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":80500,"byte_end":80509,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":82050,"byte_end":82062,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"pub fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81366,"byte_end":81441,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81444,"byte_end":81520,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81523,"byte_end":81535,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81538,"byte_end":81541,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81544,"byte_end":81618,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81621,"byte_end":81688,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81691,"byte_end":81759,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81762,"byte_end":81765,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81768,"byte_end":81780,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81783,"byte_end":81786,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81789,"byte_end":81862,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81865,"byte_end":81911,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81914,"byte_end":81917,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81920,"byte_end":81994,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":81997,"byte_end":82032,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":82035,"byte_end":82044,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":329},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92196,"byte_end":92214,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner: ?Sized>","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89107,"byte_end":89182,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89183,"byte_end":89212,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89213,"byte_end":89216,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89217,"byte_end":89289,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89290,"byte_end":89368,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89369,"byte_end":89447,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89448,"byte_end":89524,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89525,"byte_end":89601,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89602,"byte_end":89650,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89651,"byte_end":89654,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89655,"byte_end":89667,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89668,"byte_end":89671,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89672,"byte_end":89741,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89742,"byte_end":89745,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89746,"byte_end":89817,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89818,"byte_end":89821,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89822,"byte_end":89894,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89895,"byte_end":89957,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":89958,"byte_end":90037,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90038,"byte_end":90117,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90118,"byte_end":90148,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90149,"byte_end":90152,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90153,"byte_end":90233,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90234,"byte_end":90295,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90296,"byte_end":90299,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90300,"byte_end":90374,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90375,"byte_end":90390,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90391,"byte_end":90469,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90470,"byte_end":90548,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90549,"byte_end":90552,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90553,"byte_end":90624,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90625,"byte_end":90628,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90629,"byte_end":90643,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90644,"byte_end":90647,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90648,"byte_end":90727,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90728,"byte_end":90807,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90808,"byte_end":90883,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90884,"byte_end":90953,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90954,"byte_end":90991,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90992,"byte_end":90995,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":90996,"byte_end":91074,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91075,"byte_end":91143,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91144,"byte_end":91147,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91148,"byte_end":91162,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91163,"byte_end":91166,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91167,"byte_end":91179,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91180,"byte_end":91183,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91184,"byte_end":91191,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91192,"byte_end":91229,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91230,"byte_end":91254,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91255,"byte_end":91284,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91285,"byte_end":91288,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91289,"byte_end":91313,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91314,"byte_end":91347,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91348,"byte_end":91351,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91352,"byte_end":91415,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91416,"byte_end":91419,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91420,"byte_end":91479,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91480,"byte_end":91518,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91519,"byte_end":91579,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91580,"byte_end":91583,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91584,"byte_end":91611,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91612,"byte_end":91658,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91659,"byte_end":91731,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91732,"byte_end":91735,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91736,"byte_end":91793,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91794,"byte_end":91801,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91802,"byte_end":91805,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91806,"byte_end":91845,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91846,"byte_end":91849,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91850,"byte_end":91857,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91858,"byte_end":91895,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91896,"byte_end":91899,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91900,"byte_end":91924,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91925,"byte_end":91950,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91951,"byte_end":91954,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":91955,"byte_end":92013,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92014,"byte_end":92017,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92018,"byte_end":92061,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92062,"byte_end":92095,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92096,"byte_end":92099,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92100,"byte_end":92130,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92131,"byte_end":92170,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92171,"byte_end":92178,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92301,"byte_end":92305,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"pub fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92234,"byte_end":92283,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92286,"byte_end":92295,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92617,"byte_end":92625,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"pub fn wrap_ref(&Inner) -> &Self","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92514,"byte_end":92587,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92590,"byte_end":92599,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":92602,"byte_end":92611,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":93315,"byte_end":93323,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"pub fn wrap_mut(&mut Inner) -> &mut Self","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":93196,"byte_end":93273,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":93276,"byte_end":93297,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":93300,"byte_end":93309,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":93987,"byte_end":93997,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"pub fn wrap_slice(&[Inner]) -> &[Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":93898,"byte_end":93969,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":93972,"byte_end":93981,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":94541,"byte_end":94555,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"pub fn wrap_slice_mut(&mut [Inner]) -> &mut [Self] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":94430,"byte_end":94503,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":94506,"byte_end":94523,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":94526,"byte_end":94535,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":95061,"byte_end":95065,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"pub fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":94994,"byte_end":95043,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":95046,"byte_end":95055,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":95270,"byte_end":95278,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"pub fn peel_ref(&Self) -> &Inner","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":95167,"byte_end":95240,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":95243,"byte_end":95252,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":95255,"byte_end":95264,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":95968,"byte_end":95976,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"pub fn peel_mut(&mut Self) -> &mut Inner","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":95849,"byte_end":95925,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":95928,"byte_end":95950,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":95953,"byte_end":95962,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":96640,"byte_end":96650,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"pub fn peel_slice(&[Self]) -> &[Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":96551,"byte_end":96622,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":96625,"byte_end":96634,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":97195,"byte_end":97209,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"pub fn peel_slice_mut(&mut [Self]) -> &mut [Inner] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":97084,"byte_end":97159,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":97162,"byte_end":97177,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":97180,"byte_end":97189,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":748},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3564,"byte_end":3604,"line_start":119,"line_end":119,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":747},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3441,"byte_end":3513,"line_start":117,"line_end":117,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3516,"byte_end":3561,"line_start":118,"line_end":118,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":750},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3790,"byte_end":3814,"line_start":123,"line_end":123,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":747},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3608,"byte_end":3676,"line_start":120,"line_end":120,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3679,"byte_end":3754,"line_start":121,"line_end":121,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3757,"byte_end":3787,"line_start":122,"line_end":122,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":752},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4035,"byte_end":4047,"line_start":127,"line_end":127,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":747},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3818,"byte_end":3893,"line_start":124,"line_end":124,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3896,"byte_end":3969,"line_start":125,"line_end":125,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3972,"byte_end":4032,"line_start":126,"line_end":126,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":754},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4338,"byte_end":4355,"line_start":134,"line_end":134,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":747},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4051,"byte_end":4125,"line_start":128,"line_end":128,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4128,"byte_end":4159,"line_start":129,"line_end":129,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4162,"byte_end":4165,"line_start":130,"line_end":130,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4168,"byte_end":4244,"line_start":131,"line_end":131,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4247,"byte_end":4322,"line_start":132,"line_end":132,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4325,"byte_end":4335,"line_start":133,"line_end":133,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":747},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3424,"byte_end":3436,"line_start":116,"line_end":116,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"pub enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":3290,"byte_end":3363,"line_start":114,"line_end":114,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":346},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4830,"byte_end":4838,"line_start":150,"line_end":150,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"pub fn bytes_of<T: NoUninit>(&T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4621,"byte_end":4655,"line_start":145,"line_end":145,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4656,"byte_end":4659,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4660,"byte_end":4738,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4739,"byte_end":4812,"line_start":148,"line_end":148,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4813,"byte_end":4822,"line_start":149,"line_end":149,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":348},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5125,"byte_end":5137,"line_start":159,"line_end":159,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"pub fn bytes_of_mut<T: NoUninit + AnyBitPattern>(&mut T) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4908,"byte_end":4950,"line_start":154,"line_end":154,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4951,"byte_end":4954,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4955,"byte_end":5033,"line_start":156,"line_end":156,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5034,"byte_end":5107,"line_start":157,"line_end":157,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5108,"byte_end":5117,"line_start":158,"line_end":158,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":350},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5365,"byte_end":5375,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"pub fn from_bytes<T: AnyBitPattern>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5235,"byte_end":5269,"line_start":163,"line_end":163,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5270,"byte_end":5273,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5274,"byte_end":5287,"line_start":165,"line_end":165,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5288,"byte_end":5291,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5292,"byte_end":5347,"line_start":167,"line_end":167,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5348,"byte_end":5357,"line_start":168,"line_end":168,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":352},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5594,"byte_end":5608,"line_start":179,"line_end":179,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"pub fn from_bytes_mut<T: NoUninit + AnyBitPattern>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5452,"byte_end":5494,"line_start":173,"line_end":173,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5495,"byte_end":5498,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5499,"byte_end":5512,"line_start":175,"line_end":175,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5513,"byte_end":5516,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5517,"byte_end":5576,"line_start":177,"line_end":177,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5577,"byte_end":5586,"line_start":178,"line_end":178,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":354},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5854,"byte_end":5876,"line_start":188,"line_end":188,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::try_pod_read_unaligned","value":"pub fn try_pod_read_unaligned<T: AnyBitPattern>(&[u8])\n-> Result<T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5708,"byte_end":5755,"line_start":183,"line_end":183,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5756,"byte_end":5759,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5760,"byte_end":5774,"line_start":185,"line_end":185,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5775,"byte_end":5836,"line_start":186,"line_end":186,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5837,"byte_end":5846,"line_start":187,"line_end":187,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":356},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6138,"byte_end":6156,"line_start":197,"line_end":197,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::pod_read_unaligned","value":"pub fn pod_read_unaligned<T: AnyBitPattern>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":5994,"byte_end":6031,"line_start":192,"line_end":192,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6032,"byte_end":6035,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6036,"byte_end":6049,"line_start":194,"line_end":194,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6050,"byte_end":6120,"line_start":195,"line_end":195,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6121,"byte_end":6130,"line_start":196,"line_end":196,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":358},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6442,"byte_end":6456,"line_start":208,"line_end":208,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"pub fn try_from_bytes<T: AnyBitPattern>(&[u8]) -> Result<&T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6248,"byte_end":6282,"line_start":201,"line_end":201,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6283,"byte_end":6286,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6287,"byte_end":6301,"line_start":203,"line_end":203,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6302,"byte_end":6305,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6306,"byte_end":6355,"line_start":205,"line_end":205,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6356,"byte_end":6424,"line_start":206,"line_end":206,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6425,"byte_end":6434,"line_start":207,"line_end":207,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":360},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6761,"byte_end":6779,"line_start":219,"line_end":219,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: NoUninit + AnyBitPattern>(&mut [u8])\n-> Result<&mut T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6559,"byte_end":6601,"line_start":212,"line_end":212,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6602,"byte_end":6605,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6606,"byte_end":6620,"line_start":214,"line_end":214,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6621,"byte_end":6624,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6625,"byte_end":6674,"line_start":216,"line_end":216,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6675,"byte_end":6743,"line_start":217,"line_end":217,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6744,"byte_end":6753,"line_start":218,"line_end":218,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":362},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7049,"byte_end":7053,"line_start":231,"line_end":231,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"pub fn cast<A: NoUninit, B: AnyBitPattern>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6910,"byte_end":6931,"line_start":225,"line_end":225,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6932,"byte_end":6935,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6936,"byte_end":6949,"line_start":227,"line_end":227,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6950,"byte_end":6953,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":6954,"byte_end":7031,"line_start":229,"line_end":229,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7032,"byte_end":7041,"line_start":230,"line_end":230,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":365},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7258,"byte_end":7266,"line_start":241,"line_end":241,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"pub fn cast_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\n                AnyBitPattern>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7132,"byte_end":7164,"line_start":235,"line_end":235,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7165,"byte_end":7168,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7169,"byte_end":7182,"line_start":237,"line_end":237,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7183,"byte_end":7186,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7187,"byte_end":7240,"line_start":239,"line_end":239,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7241,"byte_end":7250,"line_start":240,"line_end":240,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":368},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7504,"byte_end":7512,"line_start":251,"line_end":251,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"pub fn cast_ref<A: NoUninit, B: AnyBitPattern>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7386,"byte_end":7410,"line_start":245,"line_end":245,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7411,"byte_end":7414,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7415,"byte_end":7428,"line_start":247,"line_end":247,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7429,"byte_end":7432,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7433,"byte_end":7486,"line_start":249,"line_end":249,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7487,"byte_end":7496,"line_start":250,"line_end":250,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":371},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7721,"byte_end":7731,"line_start":261,"line_end":261,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"pub fn cast_slice<A: NoUninit, B: AnyBitPattern>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7597,"byte_end":7625,"line_start":255,"line_end":255,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7626,"byte_end":7629,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7630,"byte_end":7643,"line_start":257,"line_end":257,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7644,"byte_end":7647,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7648,"byte_end":7703,"line_start":259,"line_end":259,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7704,"byte_end":7713,"line_start":260,"line_end":260,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":374},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7958,"byte_end":7972,"line_start":271,"line_end":271,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"pub fn cast_slice_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\n                      AnyBitPattern>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7822,"byte_end":7858,"line_start":265,"line_end":265,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7859,"byte_end":7862,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7863,"byte_end":7876,"line_start":267,"line_end":267,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7877,"byte_end":7880,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7881,"byte_end":7940,"line_start":269,"line_end":269,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":7941,"byte_end":7950,"line_start":270,"line_end":270,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":377},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8177,"byte_end":8189,"line_start":277,"line_end":277,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"pub fn pod_align_to<T: NoUninit, U: AnyBitPattern>(&[T]) -> (&[T], &[U], &[T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8102,"byte_end":8159,"line_start":275,"line_end":275,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8160,"byte_end":8169,"line_start":276,"line_end":276,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":380},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8373,"byte_end":8389,"line_start":283,"line_end":283,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"pub fn pod_align_to_mut<T: NoUninit + AnyBitPattern, U: NoUninit +\n                        AnyBitPattern>(&mut [T])\n-> (&mut [T], &mut [U], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8294,"byte_end":8355,"line_start":281,"line_end":281,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8356,"byte_end":8365,"line_start":282,"line_end":282,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":383},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8933,"byte_end":8941,"line_start":300,"line_end":300,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"pub fn try_cast<A: NoUninit, B: AnyBitPattern>(A) -> Result<B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8546,"byte_end":8575,"line_start":289,"line_end":289,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8576,"byte_end":8579,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8580,"byte_end":8657,"line_start":291,"line_end":291,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8658,"byte_end":8737,"line_start":292,"line_end":292,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8738,"byte_end":8816,"line_start":293,"line_end":293,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8817,"byte_end":8836,"line_start":294,"line_end":294,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8837,"byte_end":8840,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8841,"byte_end":8855,"line_start":296,"line_end":296,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8856,"byte_end":8859,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8860,"byte_end":8915,"line_start":298,"line_end":298,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":8916,"byte_end":8925,"line_start":299,"line_end":299,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":386},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9239,"byte_end":9251,"line_start":311,"line_end":311,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"pub fn try_cast_ref<A: NoUninit, B: AnyBitPattern>(&A)\n-> Result<&B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9046,"byte_end":9082,"line_start":304,"line_end":304,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9083,"byte_end":9086,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9087,"byte_end":9101,"line_start":306,"line_end":306,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9102,"byte_end":9105,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9106,"byte_end":9158,"line_start":308,"line_end":308,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9159,"byte_end":9221,"line_start":309,"line_end":309,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9222,"byte_end":9231,"line_start":310,"line_end":310,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":389},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9464,"byte_end":9476,"line_start":319,"line_end":319,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"pub fn try_cast_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\n                    AnyBitPattern>(&mut A) -> Result<&mut B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9362,"byte_end":9406,"line_start":315,"line_end":315,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9407,"byte_end":9410,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9411,"byte_end":9446,"line_start":317,"line_end":317,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9447,"byte_end":9456,"line_start":318,"line_end":318,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":392},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10380,"byte_end":10394,"line_start":339,"line_end":339,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"pub fn try_cast_slice<A: NoUninit, B: AnyBitPattern>(&[A])\n-> Result<&[B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9622,"byte_end":9695,"line_start":323,"line_end":323,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9696,"byte_end":9699,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9700,"byte_end":9759,"line_start":325,"line_end":325,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9760,"byte_end":9829,"line_start":326,"line_end":326,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9830,"byte_end":9833,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9834,"byte_end":9848,"line_start":328,"line_end":328,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9849,"byte_end":9852,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9853,"byte_end":9933,"line_start":330,"line_end":330,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9934,"byte_end":9954,"line_start":331,"line_end":331,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":9955,"byte_end":10032,"line_start":332,"line_end":332,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10033,"byte_end":10109,"line_start":333,"line_end":333,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10110,"byte_end":10190,"line_start":334,"line_end":334,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10191,"byte_end":10215,"line_start":335,"line_end":335,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10216,"byte_end":10341,"line_start":336,"line_end":336,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10342,"byte_end":10362,"line_start":337,"line_end":337,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10363,"byte_end":10372,"line_start":338,"line_end":338,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":395},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10657,"byte_end":10675,"line_start":348,"line_end":348,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\n                          AnyBitPattern>(&mut [A])\n-> Result<&mut [B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10511,"byte_end":10583,"line_start":343,"line_end":343,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10584,"byte_end":10596,"line_start":344,"line_end":344,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10597,"byte_end":10600,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10601,"byte_end":10639,"line_start":346,"line_end":346,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":10640,"byte_end":10649,"line_start":347,"line_end":347,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":13340,"byte_end":13341,"line_start":43,"line_end":43,"column_start":39,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18699,"byte_end":18700,"line_start":132,"line_end":132,"column_start":53,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":19770,"byte_end":19786,"line_start":175,"line_end":175,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20012,"byte_end":20028,"line_start":183,"line_end":183,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41935,"byte_end":41943,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41976,"byte_end":41982,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42022,"byte_end":42028,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42069,"byte_end":42075,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42116,"byte_end":42122,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42163,"byte_end":42169,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42211,"byte_end":42217,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42260,"byte_end":42266,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42306,"byte_end":42312,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42353,"byte_end":42359,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42400,"byte_end":42406,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42447,"byte_end":42453,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42495,"byte_end":42501,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42626,"byte_end":42632,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42686,"byte_end":42697,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42729,"byte_end":42742,"line_start":62,"line_end":62,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42784,"byte_end":42796,"line_start":63,"line_end":63,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":56446,"byte_end":56453,"line_start":349,"line_end":349,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":56521,"byte_end":56527,"line_start":351,"line_end":351,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":56595,"byte_end":56602,"line_start":353,"line_end":353,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":56670,"byte_end":56677,"line_start":355,"line_end":355,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":56745,"byte_end":56751,"line_start":357,"line_end":357,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":56819,"byte_end":56826,"line_start":359,"line_end":359,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59213,"byte_end":59221,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59249,"byte_end":59255,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59290,"byte_end":59296,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59332,"byte_end":59338,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59374,"byte_end":59380,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59416,"byte_end":59422,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59459,"byte_end":59465,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59503,"byte_end":59509,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59544,"byte_end":59550,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59586,"byte_end":59592,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59628,"byte_end":59634,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59670,"byte_end":59676,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59713,"byte_end":59719,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":60030,"byte_end":60041,"line_start":68,"line_end":68,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":60068,"byte_end":60081,"line_start":69,"line_end":69,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":60113,"byte_end":60125,"line_start":70,"line_end":70,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":72232,"byte_end":72239,"line_start":310,"line_end":310,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":72302,"byte_end":72308,"line_start":312,"line_end":312,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":72371,"byte_end":72378,"line_start":314,"line_end":314,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":72441,"byte_end":72448,"line_start":316,"line_end":316,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":72511,"byte_end":72517,"line_start":318,"line_end":318,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":72580,"byte_end":72587,"line_start":320,"line_end":320,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75704,"byte_end":75705,"line_start":48,"line_end":48,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":97701,"byte_end":97709,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4422,"byte_end":4434,"line_start":137,"line_end":137,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":2858,"byte_end":2865,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":29}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":13264,"byte_end":13272,"line_start":41,"line_end":41,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":165},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":13275,"byte_end":13280,"line_start":41,"line_end":41,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":13283,"byte_end":13287,"line_start":41,"line_end":41,"column_start":52,"column_end":56},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/anybitpattern.rs","byte_start":13340,"byte_end":13341,"line_start":43,"line_end":43,"column_start":39,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":27},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18220,"byte_end":18224,"line_start":121,"line_end":121,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":18699,"byte_end":18700,"line_start":132,"line_end":132,"column_start":53,"column_end":54},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":48},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":19770,"byte_end":19786,"line_start":175,"line_end":175,"column_start":29,"column_end":45},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":398},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/checked.rs","byte_start":20012,"byte_end":20028,"line_start":183,"line_end":183,"column_start":36,"column_end":52},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":398},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41010,"byte_end":41015,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41935,"byte_end":41943,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":22}},"from":{"krate":1,"index":26548},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":41976,"byte_end":41982,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42022,"byte_end":42028,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42069,"byte_end":42075,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42116,"byte_end":42122,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42163,"byte_end":42169,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42211,"byte_end":42217,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42260,"byte_end":42266,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42306,"byte_end":42312,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42353,"byte_end":42359,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42400,"byte_end":42406,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42447,"byte_end":42453,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42495,"byte_end":42501,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42626,"byte_end":42632,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42686,"byte_end":42697,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":3037},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42729,"byte_end":42742,"line_start":62,"line_end":62,"column_start":26,"column_end":39},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":36597},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":42784,"byte_end":42796,"line_start":63,"line_end":63,"column_start":39,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":30411},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":56446,"byte_end":56453,"line_start":349,"line_end":349,"column_start":34,"column_end":41},"kind":{"Impl":{"id":39}},"from":{"krate":1,"index":50872},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":56521,"byte_end":56527,"line_start":351,"line_end":351,"column_start":34,"column_end":40},"kind":{"Impl":{"id":40}},"from":{"krate":1,"index":50881},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":56595,"byte_end":56602,"line_start":353,"line_end":353,"column_start":34,"column_end":41},"kind":{"Impl":{"id":41}},"from":{"krate":1,"index":50892},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":56670,"byte_end":56677,"line_start":355,"line_end":355,"column_start":34,"column_end":41},"kind":{"Impl":{"id":42}},"from":{"krate":1,"index":50901},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":56745,"byte_end":56751,"line_start":357,"line_end":357,"column_start":34,"column_end":40},"kind":{"Impl":{"id":43}},"from":{"krate":1,"index":50912},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/zeroable.rs","byte_start":56819,"byte_end":56826,"line_start":359,"line_end":359,"column_start":34,"column_end":41},"kind":{"Impl":{"id":44}},"from":{"krate":1,"index":50927},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58747,"byte_end":58755,"line_start":29,"line_end":29,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":165},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":58758,"byte_end":58762,"line_start":29,"line_end":29,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59213,"byte_end":59221,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"kind":{"Impl":{"id":59}},"from":{"krate":1,"index":26548},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59249,"byte_end":59255,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59290,"byte_end":59296,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59332,"byte_end":59338,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59374,"byte_end":59380,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59416,"byte_end":59422,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59459,"byte_end":59465,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59503,"byte_end":59509,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59544,"byte_end":59550,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59586,"byte_end":59592,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59628,"byte_end":59634,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59670,"byte_end":59676,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":59713,"byte_end":59719,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":60030,"byte_end":60041,"line_start":68,"line_end":68,"column_start":29,"column_end":40},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":3037},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":60068,"byte_end":60081,"line_start":69,"line_end":69,"column_start":21,"column_end":34},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":36597},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":60113,"byte_end":60125,"line_start":70,"line_end":70,"column_start":29,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":30411},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":72232,"byte_end":72239,"line_start":310,"line_end":310,"column_start":29,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":1,"index":50872},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":72302,"byte_end":72308,"line_start":312,"line_end":312,"column_start":29,"column_end":35},"kind":{"Impl":{"id":76}},"from":{"krate":1,"index":50881},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":72371,"byte_end":72378,"line_start":314,"line_end":314,"column_start":29,"column_end":36},"kind":{"Impl":{"id":77}},"from":{"krate":1,"index":50892},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":72441,"byte_end":72448,"line_start":316,"line_end":316,"column_start":29,"column_end":36},"kind":{"Impl":{"id":78}},"from":{"krate":1,"index":50901},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":72511,"byte_end":72517,"line_start":318,"line_end":318,"column_start":29,"column_end":35},"kind":{"Impl":{"id":79}},"from":{"krate":1,"index":50912},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/pod.rs","byte_start":72580,"byte_end":72587,"line_start":320,"line_end":320,"column_start":29,"column_end":36},"kind":{"Impl":{"id":80}},"from":{"krate":1,"index":50927},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75644,"byte_end":75649,"line_start":46,"line_end":46,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":308}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75652,"byte_end":75656,"line_start":46,"line_end":46,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":308}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/no_uninit.rs","byte_start":75704,"byte_end":75705,"line_start":48,"line_end":48,"column_start":34,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":310},"to":{"krate":0,"index":308}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/contiguous.rs","byte_start":78825,"byte_end":78829,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":316}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/transparent.rs","byte_start":97701,"byte_end":97709,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":103}},"from":{"krate":1,"index":26548},"to":{"krate":0,"index":329}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.9.1/src/lib.rs","byte_start":4422,"byte_end":4434,"line_start":137,"line_end":137,"column_start":29,"column_end":41},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":9560}}]}