{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0","program":"/usr/bin/rls","arguments":["--crate-name","dasp_sample","--edition=2018","/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=161b0e5a8cd7fc53","-C","extra-filename=-161b0e5a8cd7fc53","--out-dir","/home/louie/Programs/maquinitas/target/rls/debug/deps","-L","dependency=/home/louie/Programs/maquinitas/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/usr"],"output":"/home/louie/Programs/maquinitas/target/rls/debug/deps/libdasp_sample-161b0e5a8cd7fc53.rmeta"},"prelude":{"crate_id":{"name":"dasp_sample","disambiguator":[17472564141048077419,0]},"crate_root":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src","external_crates":[{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12023920652292776473,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/ops.rs","num":2,"id":{"name":"core","disambiguator":[8607811298988957190,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9950803289178341956,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13474909584011716809,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14989130687617550202,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16102964373074206153,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5778140418855102640,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4313679198529278428,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4133710094375488264,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7595865551076237336,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7540130326731804087,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[12866123005810308726,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[1553467655670750388,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[15291019179027074616,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[985971798445026598,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13801465309967224704,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[2515263550385514547,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[15896354199165419201,0]}},{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[14578328142683063560,0]}}],"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":0,"byte_end":10933,"line_start":1,"line_end":324,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":57},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":459,"byte_end":465,"line_start":13,"line_end":13,"column_start":16,"column_end":22},"alias_span":null,"name":"Duplex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":43},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":467,"byte_end":477,"line_start":13,"line_end":13,"column_start":24,"column_end":34},"alias_span":null,"name":"FromSample","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":50},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":479,"byte_end":487,"line_start":13,"line_end":13,"column_start":36,"column_end":44},"alias_span":null,"name":"ToSample","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1116},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":506,"byte_end":509,"line_start":14,"line_end":14,"column_start":17,"column_end":20},"alias_span":null,"name":"I24","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1199},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":511,"byte_end":514,"line_start":14,"line_end":14,"column_start":22,"column_end":25},"alias_span":null,"name":"I48","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1435},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":516,"byte_end":519,"line_start":14,"line_end":14,"column_start":27,"column_end":30},"alias_span":null,"name":"U24","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1509},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":521,"byte_end":524,"line_start":14,"line_end":14,"column_start":32,"column_end":35},"alias_span":null,"name":"U48","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":961},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":30254,"byte_end":30257,"line_start":3,"line_end":3,"column_start":20,"column_end":23},"alias_span":null,"name":"I11","value":"","parent":{"krate":0,"index":73}},{"kind":"Use","ref_id":{"krate":0,"index":1036},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":30278,"byte_end":30281,"line_start":4,"line_end":4,"column_start":20,"column_end":23},"alias_span":null,"name":"I20","value":"","parent":{"krate":0,"index":73}},{"kind":"Use","ref_id":{"krate":0,"index":1116},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":30302,"byte_end":30305,"line_start":5,"line_end":5,"column_start":20,"column_end":23},"alias_span":null,"name":"I24","value":"","parent":{"krate":0,"index":73}},{"kind":"Use","ref_id":{"krate":0,"index":1199},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":30326,"byte_end":30329,"line_start":6,"line_end":6,"column_start":20,"column_end":23},"alias_span":null,"name":"I48","value":"","parent":{"krate":0,"index":73}},{"kind":"Use","ref_id":{"krate":0,"index":1290},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":30350,"byte_end":30353,"line_start":7,"line_end":7,"column_start":20,"column_end":23},"alias_span":null,"name":"U11","value":"","parent":{"krate":0,"index":73}},{"kind":"Use","ref_id":{"krate":0,"index":1363},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":30374,"byte_end":30377,"line_start":8,"line_end":8,"column_start":20,"column_end":23},"alias_span":null,"name":"U20","value":"","parent":{"krate":0,"index":73}},{"kind":"Use","ref_id":{"krate":0,"index":1435},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":30398,"byte_end":30401,"line_start":9,"line_end":9,"column_start":20,"column_end":23},"alias_span":null,"name":"U24","value":"","parent":{"krate":0,"index":73}},{"kind":"Use","ref_id":{"krate":0,"index":1509},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":30422,"byte_end":30425,"line_start":10,"line_end":10,"column_start":20,"column_end":23},"alias_span":null,"name":"U48","value":"","parent":{"krate":0,"index":73}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":0,"byte_end":10933,"line_start":1,"line_end":324,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":62},{"krate":0,"index":73},{"krate":0,"index":147},{"krate":0,"index":160},{"krate":0,"index":1540},{"krate":0,"index":1544},{"krate":0,"index":1548},{"krate":0,"index":1552},{"krate":0,"index":1556},{"krate":0,"index":1560},{"krate":0,"index":1564},{"krate":0,"index":1568},{"krate":0,"index":1572},{"krate":0,"index":1576},{"krate":0,"index":1580},{"krate":0,"index":1584},{"krate":0,"index":1588},{"krate":0,"index":1592},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":1596},{"krate":0,"index":1597},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":169}],"decl_id":null,"docs":" Use the [**Sample**](./trait.Sample.html) trait to remain generic over sample types, easily\n access sample type conversions, apply basic audio operations and more.","sig":null,"attributes":[{"value":"/ Use the [**Sample**](./trait.Sample.html) trait to remain generic over sample types, easily","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":0,"byte_end":95,"line_start":1,"line_end":1,"column_start":1,"column_end":96}},{"value":"/ access sample type conversions, apply basic audio operations and more.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":96,"byte_end":170,"line_start":2,"line_end":2,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":171,"byte_end":174,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ The **Sample** trait is the core abstraction throughout dasp on which most other abstractions","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":175,"byte_end":272,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/ are based.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":273,"byte_end":287,"line_start":5,"line_end":5,"column_start":1,"column_end":15}}]},{"kind":"Mod","id":{"krate":0,"index":26},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"conv","qualname":"::conv","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":172},{"krate":0,"index":199},{"krate":0,"index":226},{"krate":0,"index":253},{"krate":0,"index":280},{"krate":0,"index":307},{"krate":0,"index":334},{"krate":0,"index":361},{"krate":0,"index":388},{"krate":0,"index":415},{"krate":0,"index":442},{"krate":0,"index":469},{"krate":0,"index":496},{"krate":0,"index":523},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":664},{"krate":0,"index":666},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":57},{"krate":0,"index":59}],"decl_id":null,"docs":" Pure functions and traits for converting between i8, i16, I24, i32, I48, i64, u8, u16, U24,\n u32, U48, u64, f32 and f64.","sig":null,"attributes":[{"value":"/ Pure functions and traits for converting between i8, i16, I24, i32, I48, i64, u8, u16, U24,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":10935,"byte_end":11030,"line_start":1,"line_end":1,"column_start":1,"column_end":96}},{"value":"/ u32, U48, u64, f32 and f64.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11031,"byte_end":11062,"line_start":2,"line_end":2,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11063,"byte_end":11066,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Each conversion function is performance focused, memory-sensitive and expects that the user has","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11067,"byte_end":11166,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ validated their input prior to the function call.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11167,"byte_end":11220,"line_start":5,"line_end":5,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11221,"byte_end":11224,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ No conversion function will ever cast to a type with a size in bytes larger than the largest","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11225,"byte_end":11321,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ between the source and target sample types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11322,"byte_end":11369,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11370,"byte_end":11373,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The conversion functions do *not* check the range of incoming values for floating point values","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11374,"byte_end":11472,"line_start":10,"line_end":10,"column_start":1,"column_end":99}},{"value":"/ or any of the custom `I24`, `U24`, `I48` and `U48` types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11473,"byte_end":11534,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11535,"byte_end":11538,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Note that floating point conversions use the range -1.0 <= v < 1.0:","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11539,"byte_end":11610,"line_start":13,"line_end":13,"column_start":1,"column_end":72}},{"value":"/ `(1.0 as f64).to_sample::<i16>()` will overflow!","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":11611,"byte_end":11663,"line_start":14,"line_end":14,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":172},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":14245,"byte_end":14247,"line_start":135,"line_end":135,"column_start":18,"column_end":20},"name":"i8","qualname":"::conv::i8","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":199},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":15335,"byte_end":15338,"line_start":184,"line_end":184,"column_start":19,"column_end":22},"name":"i16","qualname":"::conv::i16","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":226},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":16598,"byte_end":16601,"line_start":237,"line_end":237,"column_start":19,"column_end":22},"name":"i24","qualname":"::conv::i24","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":253},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":17370,"byte_end":17373,"line_start":269,"line_end":269,"column_start":19,"column_end":22},"name":"i32","qualname":"::conv::i32","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":280},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":18274,"byte_end":18277,"line_start":309,"line_end":309,"column_start":19,"column_end":22},"name":"i48","qualname":"::conv::i48","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":307},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":19053,"byte_end":19056,"line_start":341,"line_end":341,"column_start":19,"column_end":22},"name":"i64","qualname":"::conv::i64","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":312},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":334},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":19878,"byte_end":19880,"line_start":377,"line_end":377,"column_start":18,"column_end":20},"name":"u8","qualname":"::conv::u8","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":361},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":20630,"byte_end":20633,"line_start":409,"line_end":409,"column_start":19,"column_end":22},"name":"u16","qualname":"::conv::u16","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":388},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":21399,"byte_end":21402,"line_start":439,"line_end":439,"column_start":19,"column_end":22},"name":"u24","qualname":"::conv::u24","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":396},{"krate":0,"index":399},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":415},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":22121,"byte_end":22124,"line_start":463,"line_end":463,"column_start":19,"column_end":22},"name":"u32","qualname":"::conv::u32","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":442},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":22891,"byte_end":22894,"line_start":489,"line_end":489,"column_start":19,"column_end":22},"name":"u48","qualname":"::conv::u48","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":469},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":23576,"byte_end":23579,"line_start":509,"line_end":509,"column_start":19,"column_end":22},"name":"u64","qualname":"::conv::u64","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":480},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":496},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":24448,"byte_end":24451,"line_start":533,"line_end":533,"column_start":19,"column_end":22},"name":"f32","qualname":"::conv::f32","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":507},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":523},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":25207,"byte_end":25210,"line_start":551,"line_end":551,"column_start":19,"column_end":22},"name":"f64","qualname":"::conv::f64","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":43},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":26038,"byte_end":26048,"line_start":570,"line_end":570,"column_start":11,"column_end":21},"name":"FromSample","qualname":"::conv::FromSample","value":"FromSample<S>","parent":null,"children":[{"krate":0,"index":45}],"decl_id":null,"docs":" Similar to the std `From` trait, but specifically for converting between sample types.","sig":null,"attributes":[{"value":"/ Similar to the std `From` trait, but specifically for converting between sample types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":25833,"byte_end":25923,"line_start":567,"line_end":567,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":25924,"byte_end":25927,"line_start":568,"line_end":568,"column_start":1,"column_end":4}},{"value":"/ We use this trait to be generic over the `Sample::to_sample` and `Sample::from_sample` methods.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":25928,"byte_end":26027,"line_start":569,"line_end":569,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":26061,"byte_end":26073,"line_start":571,"line_end":571,"column_start":8,"column_end":20},"name":"from_sample_","qualname":"::conv::FromSample::from_sample_","value":"pub fn from_sample_(S) -> Self","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":50},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29273,"byte_end":29281,"line_start":683,"line_end":683,"column_start":11,"column_end":19},"name":"ToSample","qualname":"::conv::ToSample","value":"ToSample<S>","parent":null,"children":[{"krate":0,"index":52}],"decl_id":null,"docs":" Similar to the std `Into` trait, but specifically for converting between sample types.","sig":null,"attributes":[{"value":"/ Similar to the std `Into` trait, but specifically for converting between sample types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29050,"byte_end":29140,"line_start":679,"line_end":679,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29141,"byte_end":29144,"line_start":680,"line_end":680,"column_start":1,"column_end":4}},{"value":"/ This trait has a blanket implementation for all types that implement","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29145,"byte_end":29217,"line_start":681,"line_end":681,"column_start":1,"column_end":73}},{"value":"/ [`FromSample`](./trait.FromSample.html).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29218,"byte_end":29262,"line_start":682,"line_end":682,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29294,"byte_end":29304,"line_start":684,"line_end":684,"column_start":8,"column_end":18},"name":"to_sample_","qualname":"::conv::ToSample::to_sample_","value":"pub fn to_sample_(Self) -> S","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":57},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29540,"byte_end":29546,"line_start":698,"line_end":698,"column_start":11,"column_end":17},"name":"Duplex","qualname":"::conv::Duplex","value":"Duplex<S>: FromSample<S> + ToSample<S>","parent":null,"children":[],"decl_id":null,"docs":" Sample types which may be converted to and from some type `S`.\n","sig":null,"attributes":[{"value":"/ Sample types which may be converted to and from some type `S`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29463,"byte_end":29529,"line_start":697,"line_end":697,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":73},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"types","qualname":"::types","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":111},{"krate":0,"index":119},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":139}],"decl_id":null,"docs":" A collection of custom, non-std **Sample** types.\n","sig":null,"attributes":[{"value":"/ A collection of custom, non-std **Sample** types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":30180,"byte_end":30233,"line_start":1,"line_end":1,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":102},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":37136,"byte_end":37139,"line_start":237,"line_end":237,"column_start":9,"column_end":12},"name":"i11","qualname":"::types::i11","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":967},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":976},{"krate":0,"index":978},{"krate":0,"index":980},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":928},{"krate":0,"index":931},{"krate":0,"index":934},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":949},{"krate":0,"index":952},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":982},{"krate":0,"index":984},{"krate":0,"index":986}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":961},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":37163,"byte_end":37166,"line_start":238,"line_end":238,"column_start":22,"column_end":25},"name":"I11","qualname":"::types::i11::I11","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":103},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":37283,"byte_end":37286,"line_start":243,"line_end":243,"column_start":9,"column_end":12},"name":"i20","qualname":"::types::i20","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1051},{"krate":0,"index":1053},{"krate":0,"index":1055},{"krate":0,"index":995},{"krate":0,"index":997},{"krate":0,"index":1003},{"krate":0,"index":1006},{"krate":0,"index":1009},{"krate":0,"index":1012},{"krate":0,"index":1015},{"krate":0,"index":1018},{"krate":0,"index":1021},{"krate":0,"index":1024},{"krate":0,"index":1027},{"krate":0,"index":1030},{"krate":0,"index":1033},{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":1061},{"krate":0,"index":1063},{"krate":0,"index":1065},{"krate":0,"index":1067}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1036},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":37337,"byte_end":37340,"line_start":245,"line_end":245,"column_start":22,"column_end":25},"name":"I20","qualname":"::types::i20::I20","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":111},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":37480,"byte_end":37483,"line_start":249,"line_end":249,"column_start":9,"column_end":12},"name":"i24","qualname":"::types::i24","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1116},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1131},{"krate":0,"index":1133},{"krate":0,"index":1135},{"krate":0,"index":1075},{"krate":0,"index":1077},{"krate":0,"index":1083},{"krate":0,"index":1086},{"krate":0,"index":1089},{"krate":0,"index":1092},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":1107},{"krate":0,"index":1110},{"krate":0,"index":1113},{"krate":0,"index":1137},{"krate":0,"index":1139},{"krate":0,"index":1141},{"krate":0,"index":1143},{"krate":0,"index":1145},{"krate":0,"index":1147},{"krate":0,"index":1149}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1116},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":37534,"byte_end":37537,"line_start":251,"line_end":251,"column_start":22,"column_end":25},"name":"I24","qualname":"::types::i24::I24","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":119},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":37702,"byte_end":37705,"line_start":256,"line_end":256,"column_start":9,"column_end":12},"name":"i48","qualname":"::types::i48","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1199},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1205},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1218},{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1166},{"krate":0,"index":1169},{"krate":0,"index":1172},{"krate":0,"index":1175},{"krate":0,"index":1178},{"krate":0,"index":1181},{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1193},{"krate":0,"index":1196},{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1228},{"krate":0,"index":1230},{"krate":0,"index":1232},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1238},{"krate":0,"index":1240}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1199},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":37766,"byte_end":37769,"line_start":258,"line_end":258,"column_start":22,"column_end":25},"name":"I48","qualname":"::types::i48::I48","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":133},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":37995,"byte_end":37998,"line_start":263,"line_end":263,"column_start":9,"column_end":12},"name":"u11","qualname":"::types::u11","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","parent":null,"children":[{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1290},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1296},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1305},{"krate":0,"index":1307},{"krate":0,"index":1309},{"krate":0,"index":1249},{"krate":0,"index":1251},{"krate":0,"index":1257},{"krate":0,"index":1260},{"krate":0,"index":1263},{"krate":0,"index":1266},{"krate":0,"index":1269},{"krate":0,"index":1272},{"krate":0,"index":1275},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":1284},{"krate":0,"index":1287},{"krate":0,"index":1311},{"krate":0,"index":1313}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1290},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":38022,"byte_end":38025,"line_start":264,"line_end":264,"column_start":22,"column_end":25},"name":"U11","qualname":"::types::u11::U11","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":134},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":38137,"byte_end":38140,"line_start":269,"line_end":269,"column_start":9,"column_end":12},"name":"u20","qualname":"::types::u20","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1363},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1369},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1378},{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1322},{"krate":0,"index":1324},{"krate":0,"index":1330},{"krate":0,"index":1333},{"krate":0,"index":1336},{"krate":0,"index":1339},{"krate":0,"index":1342},{"krate":0,"index":1345},{"krate":0,"index":1348},{"krate":0,"index":1351},{"krate":0,"index":1354},{"krate":0,"index":1357},{"krate":0,"index":1360},{"krate":0,"index":1384},{"krate":0,"index":1386}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1363},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":38164,"byte_end":38167,"line_start":270,"line_end":270,"column_start":22,"column_end":25},"name":"U20","qualname":"::types::u20::U20","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":135},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":38277,"byte_end":38280,"line_start":274,"line_end":274,"column_start":9,"column_end":12},"name":"u24","qualname":"::types::u24","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1435},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1454},{"krate":0,"index":1394},{"krate":0,"index":1396},{"krate":0,"index":1402},{"krate":0,"index":1405},{"krate":0,"index":1408},{"krate":0,"index":1411},{"krate":0,"index":1414},{"krate":0,"index":1417},{"krate":0,"index":1420},{"krate":0,"index":1423},{"krate":0,"index":1426},{"krate":0,"index":1429},{"krate":0,"index":1432},{"krate":0,"index":1456},{"krate":0,"index":1458},{"krate":0,"index":1460}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1435},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":38324,"byte_end":38327,"line_start":276,"line_end":276,"column_start":22,"column_end":25},"name":"U24","qualname":"::types::u24::U24","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":139},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":38452,"byte_end":38455,"line_start":280,"line_end":280,"column_start":9,"column_end":12},"name":"u48","qualname":"::types::u48","value":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1509},{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1515},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1521},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":1526},{"krate":0,"index":1528},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1476},{"krate":0,"index":1479},{"krate":0,"index":1482},{"krate":0,"index":1485},{"krate":0,"index":1488},{"krate":0,"index":1491},{"krate":0,"index":1494},{"krate":0,"index":1497},{"krate":0,"index":1500},{"krate":0,"index":1503},{"krate":0,"index":1506},{"krate":0,"index":1530},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1538}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1509},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/types.rs","byte_start":38506,"byte_end":38509,"line_start":282,"line_end":282,"column_start":22,"column_end":25},"name":"U48","qualname":"::types::u48::U48","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":147},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1247,"byte_end":1253,"line_start":39,"line_end":39,"column_start":11,"column_end":17},"name":"Sample","qualname":"::Sample","value":"Sample: Copy + Clone + PartialOrd + PartialEq","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"decl_id":null,"docs":" A trait for working generically across different **Sample** format types.","sig":null,"attributes":[{"value":"/ A trait for working generically across different **Sample** format types.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":567,"byte_end":644,"line_start":20,"line_end":20,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":645,"byte_end":648,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Provides methods for converting to and from any type that implements the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":649,"byte_end":725,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ [`FromSample`](./trait.FromSample.html) trait and provides methods for performing signal","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":726,"byte_end":818,"line_start":23,"line_end":23,"column_start":1,"column_end":93}},{"value":"/ amplitude addition and multiplication.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":819,"byte_end":861,"line_start":24,"line_end":24,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":862,"byte_end":865,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":866,"byte_end":879,"line_start":26,"line_end":26,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":880,"byte_end":883,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":884,"byte_end":895,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"/ use dasp_sample::{I24, Sample};","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":896,"byte_end":931,"line_start":29,"line_end":29,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":932,"byte_end":935,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":936,"byte_end":951,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"/     assert_eq!((-1.0).to_sample::<u8>(), 0);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":952,"byte_end":1000,"line_start":32,"line_end":32,"column_start":1,"column_end":49}},{"value":"/     assert_eq!(0.0.to_sample::<u8>(), 128);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1001,"byte_end":1048,"line_start":33,"line_end":33,"column_start":1,"column_end":48}},{"value":"/     assert_eq!(0i32.to_sample::<u32>(), 2_147_483_648);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1049,"byte_end":1108,"line_start":34,"line_end":34,"column_start":1,"column_end":60}},{"value":"/     assert_eq!(I24::new(0).unwrap(), Sample::from_sample(0.0));","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1109,"byte_end":1176,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/     assert_eq!(0.0, Sample::EQUILIBRIUM);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1177,"byte_end":1222,"line_start":36,"line_end":36,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1223,"byte_end":1228,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1229,"byte_end":1236,"line_start":38,"line_end":38,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":148},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2059,"byte_end":2065,"line_start":52,"line_end":52,"column_start":10,"column_end":16},"name":"Signed","qualname":"::Sample::Signed","value":"type Signed: SignedSample + Duplex<Self>;","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" When summing two samples of a signal together, it is necessary for both samples to be\n represented in some signed format. This associated `Addition` type represents the format to\n which `Self` should be converted for optimal `Addition` performance.","sig":null,"attributes":[{"value":"/ When summing two samples of a signal together, it is necessary for both samples to be","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1299,"byte_end":1388,"line_start":40,"line_end":40,"column_start":5,"column_end":94}},{"value":"/ represented in some signed format. This associated `Addition` type represents the format to","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1393,"byte_end":1488,"line_start":41,"line_end":41,"column_start":5,"column_end":100}},{"value":"/ which `Self` should be converted for optimal `Addition` performance.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1493,"byte_end":1565,"line_start":42,"line_end":42,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1570,"byte_end":1573,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ For example, u32's optimal `Addition` type would be i32, u8's would be i8, f32's would be","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1578,"byte_end":1671,"line_start":44,"line_end":44,"column_start":5,"column_end":98}},{"value":"/ f32, etc.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1676,"byte_end":1689,"line_start":45,"line_end":45,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1694,"byte_end":1697,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ Specifying this as an associated type allows us to automatically determine the optimal,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1702,"byte_end":1793,"line_start":47,"line_end":47,"column_start":5,"column_end":96}},{"value":"/ lossless Addition format type for summing any two unique `Sample` types together.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1798,"byte_end":1883,"line_start":48,"line_end":48,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1888,"byte_end":1891,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ As a user of the `sample` crate, you will never need to be concerned with this type unless","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1896,"byte_end":1990,"line_start":50,"line_end":50,"column_start":5,"column_end":99}},{"value":"/ you are defining your own unique `Sample` type(s).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1995,"byte_end":2049,"line_start":51,"line_end":51,"column_start":5,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":149},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2918,"byte_end":2923,"line_start":67,"line_end":67,"column_start":10,"column_end":15},"name":"Float","qualname":"::Sample::Float","value":"type Float: FloatSample + Duplex<Self>;","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" When multiplying two samples of a signal together, it is necessary for both samples to be\n represented in some signed, floating-point format. This associated `Multiplication` type\n represents the format to which `Self` should be converted for optimal `Multiplication`\n performance.","sig":null,"attributes":[{"value":"/ When multiplying two samples of a signal together, it is necessary for both samples to be","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2101,"byte_end":2194,"line_start":54,"line_end":54,"column_start":5,"column_end":98}},{"value":"/ represented in some signed, floating-point format. This associated `Multiplication` type","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2199,"byte_end":2291,"line_start":55,"line_end":55,"column_start":5,"column_end":97}},{"value":"/ represents the format to which `Self` should be converted for optimal `Multiplication`","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2296,"byte_end":2386,"line_start":56,"line_end":56,"column_start":5,"column_end":95}},{"value":"/ performance.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2391,"byte_end":2407,"line_start":57,"line_end":57,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2412,"byte_end":2415,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ For example, u32's optimal `Multiplication` type would be f32, u64's would be f64, i8's","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2420,"byte_end":2511,"line_start":59,"line_end":59,"column_start":5,"column_end":96}},{"value":"/ would be f32, etc.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2516,"byte_end":2538,"line_start":60,"line_end":60,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2543,"byte_end":2546,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ Specifying this as an associated type allows us to automatically determine the optimal,","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2551,"byte_end":2642,"line_start":62,"line_end":62,"column_start":5,"column_end":96}},{"value":"/ lossless Multiplication format type for multiplying any two unique `Sample` types together.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2647,"byte_end":2742,"line_start":63,"line_end":63,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2747,"byte_end":2750,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ As a user of the `sample` crate, you will never need to be concerned with this type unless","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2755,"byte_end":2849,"line_start":65,"line_end":65,"column_start":5,"column_end":99}},{"value":"/ you are defining your own unique `Sample` type(s).","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2854,"byte_end":2908,"line_start":66,"line_end":66,"column_start":5,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":150},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3578,"byte_end":3589,"line_start":86,"line_end":86,"column_start":11,"column_end":22},"name":"EQUILIBRIUM","qualname":"::Sample::EQUILIBRIUM","value":"Self","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" The equilibrium value for the wave that this `Sample` type represents. This is normally the\n value that is equal distance from both the min and max ranges of the sample.","sig":null,"attributes":[{"value":"/ The equilibrium value for the wave that this `Sample` type represents. This is normally the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":2958,"byte_end":3053,"line_start":69,"line_end":69,"column_start":5,"column_end":100}},{"value":"/ value that is equal distance from both the min and max ranges of the sample.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3058,"byte_end":3138,"line_start":70,"line_end":70,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3143,"byte_end":3146,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3151,"byte_end":3164,"line_start":72,"line_end":72,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3169,"byte_end":3172,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3177,"byte_end":3188,"line_start":74,"line_end":74,"column_start":5,"column_end":16}},{"value":"/ use dasp_sample::Sample;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3193,"byte_end":3221,"line_start":75,"line_end":75,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3226,"byte_end":3229,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3234,"byte_end":3249,"line_start":77,"line_end":77,"column_start":5,"column_end":20}},{"value":"/     assert_eq!(0.0, f32::EQUILIBRIUM);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3254,"byte_end":3296,"line_start":78,"line_end":78,"column_start":5,"column_end":47}},{"value":"/     assert_eq!(0, i32::EQUILIBRIUM);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3301,"byte_end":3341,"line_start":79,"line_end":79,"column_start":5,"column_end":45}},{"value":"/     assert_eq!(128, u8::EQUILIBRIUM);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3346,"byte_end":3387,"line_start":80,"line_end":80,"column_start":5,"column_end":46}},{"value":"/     assert_eq!(32_768_u16, Sample::EQUILIBRIUM);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3392,"byte_end":3444,"line_start":81,"line_end":81,"column_start":5,"column_end":57}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3449,"byte_end":3454,"line_start":82,"line_end":82,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3459,"byte_end":3466,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3471,"byte_end":3474,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ **Note:** This will likely be changed to an \"associated const\" if the feature lands.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3479,"byte_end":3567,"line_start":85,"line_end":85,"column_start":5,"column_end":93}}]},{"kind":"Const","id":{"krate":0,"index":151},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4214,"byte_end":4222,"line_start":107,"line_end":107,"column_start":11,"column_end":19},"name":"IDENTITY","qualname":"::Sample::IDENTITY","value":"Self::Float","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" The multiplicative identity of the signal.","sig":null,"attributes":[{"value":"/ The multiplicative identity of the signal.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3602,"byte_end":3648,"line_start":88,"line_end":88,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3653,"byte_end":3656,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ In other words: A value which when used to scale/multiply the amplitude or frequency of a","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3661,"byte_end":3754,"line_start":90,"line_end":90,"column_start":5,"column_end":98}},{"value":"/ signal, returns the same signal.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3759,"byte_end":3795,"line_start":91,"line_end":91,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3800,"byte_end":3803,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This is useful as a default, non-affecting amplitude or frequency multiplier.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3808,"byte_end":3889,"line_start":93,"line_end":93,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3894,"byte_end":3897,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3902,"byte_end":3915,"line_start":95,"line_end":95,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3920,"byte_end":3923,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3928,"byte_end":3939,"line_start":97,"line_end":97,"column_start":5,"column_end":16}},{"value":"/ use dasp_sample::{Sample, U48};","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3944,"byte_end":3979,"line_start":98,"line_end":98,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3984,"byte_end":3987,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":3992,"byte_end":4007,"line_start":100,"line_end":100,"column_start":5,"column_end":20}},{"value":"/     assert_eq!(1.0, f32::IDENTITY);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4012,"byte_end":4051,"line_start":101,"line_end":101,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(1.0, i8::IDENTITY);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4056,"byte_end":4094,"line_start":102,"line_end":102,"column_start":5,"column_end":43}},{"value":"/     assert_eq!(1.0, u8::IDENTITY);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4099,"byte_end":4137,"line_start":103,"line_end":103,"column_start":5,"column_end":43}},{"value":"/     assert_eq!(1.0, U48::IDENTITY);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4142,"byte_end":4181,"line_start":104,"line_end":104,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4186,"byte_end":4191,"line_start":105,"line_end":105,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4196,"byte_end":4203,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4763,"byte_end":4772,"line_start":125,"line_end":125,"column_start":8,"column_end":17},"name":"to_sample","qualname":"::Sample::to_sample","value":"pub fn to_sample<S>(Self) -> S where Self: ToSample<S>","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Convert `self` to any type that implements `FromSample<Self>`.","sig":null,"attributes":[{"value":"/ Convert `self` to any type that implements `FromSample<Self>`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4283,"byte_end":4349,"line_start":109,"line_end":109,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4354,"byte_end":4357,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Find more details on type-specific conversion ranges and caveats in the `conv` module.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4362,"byte_end":4452,"line_start":111,"line_end":111,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4457,"byte_end":4460,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4465,"byte_end":4478,"line_start":113,"line_end":113,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4483,"byte_end":4486,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4491,"byte_end":4502,"line_start":115,"line_end":115,"column_start":5,"column_end":16}},{"value":"/ use dasp_sample::Sample;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4507,"byte_end":4535,"line_start":116,"line_end":116,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4540,"byte_end":4543,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4548,"byte_end":4563,"line_start":118,"line_end":118,"column_start":5,"column_end":20}},{"value":"/     assert_eq!(0.0.to_sample::<i32>(), 0);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4568,"byte_end":4614,"line_start":119,"line_end":119,"column_start":5,"column_end":51}},{"value":"/     assert_eq!(0.0.to_sample::<u8>(), 128);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4619,"byte_end":4666,"line_start":120,"line_end":120,"column_start":5,"column_end":52}},{"value":"/     assert_eq!((-1.0).to_sample::<u8>(), 0);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4671,"byte_end":4719,"line_start":121,"line_end":121,"column_start":5,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4724,"byte_end":4729,"line_start":122,"line_end":122,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4734,"byte_end":4741,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4746,"byte_end":4755,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5377,"byte_end":5388,"line_start":149,"line_end":149,"column_start":8,"column_end":19},"name":"from_sample","qualname":"::Sample::from_sample","value":"pub fn from_sample<S>(S) -> Self where Self: FromSample<S>","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Create a `Self` from any type that implements `ToSample<Self>`.","sig":null,"attributes":[{"value":"/ Create a `Self` from any type that implements `ToSample<Self>`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4867,"byte_end":4934,"line_start":132,"line_end":132,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4939,"byte_end":4942,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Find more details on type-specific conversion ranges and caveats in the `conv` module.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":4947,"byte_end":5037,"line_start":134,"line_end":134,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5042,"byte_end":5045,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5050,"byte_end":5063,"line_start":136,"line_end":136,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5068,"byte_end":5071,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5076,"byte_end":5087,"line_start":138,"line_end":138,"column_start":5,"column_end":16}},{"value":"/ use dasp_sample::{Sample, I24};","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5092,"byte_end":5127,"line_start":139,"line_end":139,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5132,"byte_end":5135,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5140,"byte_end":5155,"line_start":141,"line_end":141,"column_start":5,"column_end":20}},{"value":"/     assert_eq!(f32::from_sample(128_u8), 0.0);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5160,"byte_end":5210,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/     assert_eq!(i8::from_sample(-1.0), -128);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5215,"byte_end":5263,"line_start":143,"line_end":143,"column_start":5,"column_end":53}},{"value":"/     assert_eq!(I24::from_sample(0.0), I24::new(0).unwrap());","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5268,"byte_end":5332,"line_start":144,"line_end":144,"column_start":5,"column_end":69}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5337,"byte_end":5342,"line_start":145,"line_end":145,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5347,"byte_end":5354,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5360,"byte_end":5369,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5946,"byte_end":5962,"line_start":170,"line_end":170,"column_start":8,"column_end":24},"name":"to_signed_sample","qualname":"::Sample::to_signed_sample","value":"pub fn to_signed_sample(Self) -> Self::Signed","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Converts `self` to the equivalent `Sample` in the associated `Signed` format.","sig":null,"attributes":[{"value":"/ Converts `self` to the equivalent `Sample` in the associated `Signed` format.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5498,"byte_end":5579,"line_start":156,"line_end":156,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5584,"byte_end":5587,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ This is a simple wrapper around `Sample::to_sample` which may provide extra convenience in","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5592,"byte_end":5686,"line_start":158,"line_end":158,"column_start":5,"column_end":99}},{"value":"/ some cases, particularly for assisting type inference.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5691,"byte_end":5749,"line_start":159,"line_end":159,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5754,"byte_end":5757,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5762,"byte_end":5775,"line_start":161,"line_end":161,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5780,"byte_end":5783,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5788,"byte_end":5799,"line_start":163,"line_end":163,"column_start":5,"column_end":16}},{"value":"/ use dasp_sample::Sample;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5804,"byte_end":5832,"line_start":164,"line_end":164,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5837,"byte_end":5840,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5845,"byte_end":5860,"line_start":166,"line_end":166,"column_start":5,"column_end":20}},{"value":"/     assert_eq!(128_u8.to_signed_sample(), 0i8);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5865,"byte_end":5916,"line_start":167,"line_end":167,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5921,"byte_end":5926,"line_start":168,"line_end":168,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":5931,"byte_end":5938,"line_start":169,"line_end":169,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6469,"byte_end":6484,"line_start":188,"line_end":188,"column_start":8,"column_end":23},"name":"to_float_sample","qualname":"::Sample::to_float_sample","value":"pub fn to_float_sample(Self) -> Self::Float","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Converts `self` to the equivalent `Sample` in the associated `Float` format.","sig":null,"attributes":[{"value":"/ Converts `self` to the equivalent `Sample` in the associated `Float` format.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6023,"byte_end":6103,"line_start":174,"line_end":174,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6108,"byte_end":6111,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This is a simple wrapper around `Sample::to_sample` which may provide extra convenience in","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6116,"byte_end":6210,"line_start":176,"line_end":176,"column_start":5,"column_end":99}},{"value":"/ some cases, particularly for assisting type inference.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6215,"byte_end":6273,"line_start":177,"line_end":177,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6278,"byte_end":6281,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6286,"byte_end":6299,"line_start":179,"line_end":179,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6304,"byte_end":6307,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6312,"byte_end":6323,"line_start":181,"line_end":181,"column_start":5,"column_end":16}},{"value":"/ use dasp_sample::Sample;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6328,"byte_end":6356,"line_start":182,"line_end":182,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6361,"byte_end":6364,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6369,"byte_end":6384,"line_start":184,"line_end":184,"column_start":5,"column_end":20}},{"value":"/     assert_eq!(128_u8.to_float_sample(), 0.0);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6389,"byte_end":6439,"line_start":185,"line_end":185,"column_start":5,"column_end":55}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6444,"byte_end":6449,"line_start":186,"line_end":186,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6454,"byte_end":6461,"line_start":187,"line_end":187,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7123,"byte_end":7130,"line_start":209,"line_end":209,"column_start":8,"column_end":15},"name":"add_amp","qualname":"::Sample::add_amp","value":"pub fn add_amp(Self, Self::Signed) -> Self","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Adds (or \"offsets\") the amplitude of the `Sample` by the given signed amplitude.","sig":null,"attributes":[{"value":"/ Adds (or \"offsets\") the amplitude of the `Sample` by the given signed amplitude.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6544,"byte_end":6628,"line_start":192,"line_end":192,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6633,"byte_end":6636,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ `Self` will be converted to `Self::Signed`, the addition will occur and then the result","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6641,"byte_end":6732,"line_start":194,"line_end":194,"column_start":5,"column_end":96}},{"value":"/ will be converted back to `Self`. These conversions allow us to correctly handle the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6737,"byte_end":6825,"line_start":195,"line_end":195,"column_start":5,"column_end":93}},{"value":"/ addition of unsigned signal formats.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6830,"byte_end":6870,"line_start":196,"line_end":196,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6875,"byte_end":6878,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6883,"byte_end":6896,"line_start":198,"line_end":198,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6901,"byte_end":6904,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6909,"byte_end":6920,"line_start":200,"line_end":200,"column_start":5,"column_end":16}},{"value":"/ use dasp_sample::Sample;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6925,"byte_end":6953,"line_start":201,"line_end":201,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6958,"byte_end":6961,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6966,"byte_end":6981,"line_start":203,"line_end":203,"column_start":5,"column_end":20}},{"value":"/     assert_eq!(0.25.add_amp(0.5), 0.75);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":6986,"byte_end":7030,"line_start":204,"line_end":204,"column_start":5,"column_end":49}},{"value":"/     assert_eq!(192u8.add_amp(-128), 64);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7035,"byte_end":7079,"line_start":205,"line_end":205,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7084,"byte_end":7089,"line_start":206,"line_end":206,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7094,"byte_end":7101,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7106,"byte_end":7115,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":8101,"byte_end":8108,"line_start":237,"line_end":237,"column_start":8,"column_end":15},"name":"mul_amp","qualname":"::Sample::mul_amp","value":"pub fn mul_amp(Self, Self::Float) -> Self","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Multiplies (or \"scales\") the amplitude of the `Sample` by the given float amplitude.","sig":null,"attributes":[{"value":"/ Multiplies (or \"scales\") the amplitude of the `Sample` by the given float amplitude.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7258,"byte_end":7346,"line_start":214,"line_end":214,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7351,"byte_end":7354,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ - `amp` > 1.0 amplifies the sample.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7359,"byte_end":7398,"line_start":216,"line_end":216,"column_start":5,"column_end":44}},{"value":"/ - `amp` < 1.0 attenuates the sample.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7403,"byte_end":7443,"line_start":217,"line_end":217,"column_start":5,"column_end":45}},{"value":"/ - `amp` == 1.0 yields the same sample.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7448,"byte_end":7490,"line_start":218,"line_end":218,"column_start":5,"column_end":47}},{"value":"/ - `amp` == 0.0 yields the `Sample::EQUILIBRIUM`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7495,"byte_end":7547,"line_start":219,"line_end":219,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7552,"byte_end":7555,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ `Self` will be converted to `Self::Float`, the multiplication will occur and then the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7560,"byte_end":7649,"line_start":221,"line_end":221,"column_start":5,"column_end":94}},{"value":"/ result will be converted back to `Self`. These conversions allow us to correctly handle the","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7654,"byte_end":7749,"line_start":222,"line_end":222,"column_start":5,"column_end":100}},{"value":"/ multiplication of integral signal formats.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7754,"byte_end":7800,"line_start":223,"line_end":223,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7805,"byte_end":7808,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7813,"byte_end":7826,"line_start":225,"line_end":225,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7831,"byte_end":7834,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7839,"byte_end":7850,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/ use dasp_sample::Sample;","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7855,"byte_end":7883,"line_start":228,"line_end":228,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7888,"byte_end":7891,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7896,"byte_end":7911,"line_start":230,"line_end":230,"column_start":5,"column_end":20}},{"value":"/     assert_eq!(64_i8.mul_amp(0.5), 32);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7916,"byte_end":7959,"line_start":231,"line_end":231,"column_start":5,"column_end":48}},{"value":"/     assert_eq!(0.5.mul_amp(-2.0), -1.0);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":7964,"byte_end":8008,"line_start":232,"line_end":232,"column_start":5,"column_end":49}},{"value":"/     assert_eq!(64_u8.mul_amp(0.0), 128);","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":8013,"byte_end":8057,"line_start":233,"line_end":233,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":8062,"byte_end":8067,"line_start":234,"line_end":234,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":8072,"byte_end":8079,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":8084,"byte_end":8093,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":161},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":9786,"byte_end":9798,"line_start":282,"line_end":282,"column_start":11,"column_end":23},"name":"SignedSample","qualname":"::SignedSample","value":"SignedSample: Sample<Signed = Self> + core::ops::Add<Output = Self> + core::ops::Sub<Output\n= Self> + core::ops::Neg<Output = Self>","parent":null,"children":[],"decl_id":null,"docs":" Integral and floating-point **Sample** format types whose equilibrium is at 0.","sig":null,"attributes":[{"value":"/ Integral and floating-point **Sample** format types whose equilibrium is at 0.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":9584,"byte_end":9666,"line_start":278,"line_end":278,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":9667,"byte_end":9670,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ **Sample**s often need to be converted to some mutual **SignedSample** type for signal","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":9671,"byte_end":9761,"line_start":280,"line_end":280,"column_start":1,"column_end":91}},{"value":"/ addition.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":9762,"byte_end":9775,"line_start":281,"line_end":281,"column_start":1,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":163},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10276,"byte_end":10287,"line_start":296,"line_end":296,"column_start":11,"column_end":22},"name":"FloatSample","qualname":"::FloatSample","value":"FloatSample: Sample<Signed = Self, Float = Self> + SignedSample + core::ops::Mul<Output =\nSelf> + core::ops::Div<Output = Self> + Duplex<f32> + Duplex<f64>","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165}],"decl_id":null,"docs":" Sample format types represented as floating point numbers.","sig":null,"attributes":[{"value":"/ Sample format types represented as floating point numbers.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10081,"byte_end":10143,"line_start":292,"line_end":292,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10144,"byte_end":10147,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ **Sample**s often need to be converted to some mutual **FloatSample** type for signal scaling","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10148,"byte_end":10245,"line_start":294,"line_end":294,"column_start":1,"column_end":98}},{"value":"/ and modulation.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10246,"byte_end":10265,"line_start":295,"line_end":295,"column_start":1,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":164},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10545,"byte_end":10553,"line_start":305,"line_end":305,"column_start":11,"column_end":19},"name":"IDENTITY","qualname":"::FloatSample::IDENTITY","value":"Self","parent":{"krate":0,"index":163},"children":[],"decl_id":null,"docs":" Represents the multiplicative identity of the floating point signal.\n","sig":null,"attributes":[{"value":"/ Represents the multiplicative identity of the floating point signal.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10462,"byte_end":10534,"line_start":304,"line_end":304,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10613,"byte_end":10624,"line_start":307,"line_end":307,"column_start":8,"column_end":19},"name":"sample_sqrt","qualname":"::FloatSample::sample_sqrt","value":"pub fn sample_sqrt(Self) -> Self","parent":{"krate":0,"index":163},"children":[],"decl_id":null,"docs":" Calculate the square root of `Self`.\n","sig":null,"attributes":[{"value":"/ Calculate the square root of `Self`.","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10565,"byte_end":10605,"line_start":306,"line_end":306,"column_start":5,"column_end":45}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":26118,"byte_end":26119,"line_start":574,"line_end":574,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29347,"byte_end":29348,"line_start":687,"line_end":687,"column_start":28,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29607,"byte_end":29608,"line_start":699,"line_end":699,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":536,"byte_end":540,"line_start":16,"line_end":16,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":26}},{"kind":"Mod","span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":559,"byte_end":564,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":73}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":26118,"byte_end":26119,"line_start":574,"line_end":574,"column_start":27,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":47},"to":{"krate":0,"index":43}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29347,"byte_end":29348,"line_start":687,"line_end":687,"column_start":28,"column_end":29},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":54},"to":{"krate":0,"index":50}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29551,"byte_end":29561,"line_start":698,"line_end":698,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":43},"to":{"krate":0,"index":57}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29567,"byte_end":29575,"line_start":698,"line_end":698,"column_start":38,"column_end":46},"kind":"SuperTrait","from":{"krate":0,"index":50},"to":{"krate":0,"index":57}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/conv.rs","byte_start":29607,"byte_end":29608,"line_start":699,"line_end":699,"column_start":26,"column_end":27},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":61},"to":{"krate":0,"index":57}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1255,"byte_end":1259,"line_start":39,"line_end":39,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":147}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1262,"byte_end":1267,"line_start":39,"line_end":39,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2640},"to":{"krate":0,"index":147}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1270,"byte_end":1280,"line_start":39,"line_end":39,"column_start":34,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":2717},"to":{"krate":0,"index":147}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":1283,"byte_end":1292,"line_start":39,"line_end":39,"column_start":47,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":2670},"to":{"krate":0,"index":147}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":9804,"byte_end":9810,"line_start":283,"line_end":283,"column_start":5,"column_end":11},"kind":"SuperTrait","from":{"krate":0,"index":147},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":9843,"byte_end":9846,"line_start":284,"line_end":284,"column_start":18,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3086},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":9879,"byte_end":9882,"line_start":285,"line_end":285,"column_start":18,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3091},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":9915,"byte_end":9918,"line_start":286,"line_end":286,"column_start":18,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3113},"to":{"krate":0,"index":161}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10293,"byte_end":10299,"line_start":297,"line_end":297,"column_start":5,"column_end":11},"kind":"SuperTrait","from":{"krate":0,"index":147},"to":{"krate":0,"index":163}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10335,"byte_end":10347,"line_start":298,"line_end":298,"column_start":7,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":161},"to":{"krate":0,"index":163}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10365,"byte_end":10368,"line_start":299,"line_end":299,"column_start":18,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3096},"to":{"krate":0,"index":163}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10401,"byte_end":10404,"line_start":300,"line_end":300,"column_start":18,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":3101},"to":{"krate":0,"index":163}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10426,"byte_end":10432,"line_start":301,"line_end":301,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":57},"to":{"krate":0,"index":163}},{"span":{"file_name":"/home/louie/.cargo/registry/src/github.com-1ecc6299db9ec823/dasp_sample-0.11.0/src/lib.rs","byte_start":10444,"byte_end":10450,"line_start":302,"line_end":302,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":57},"to":{"krate":0,"index":163}}]}